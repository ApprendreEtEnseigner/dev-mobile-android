<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en" prefix="dc: http://purl.org/dc/elements/1.1/">
<head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to YB SOW."/><meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"/>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>

<meta name="dc:creator" content="YB SOW" />
<meta name="dc:title" content="Algorithme - Python - Chap1: ANALYSER UN PROBL&#x00C8;ME" />



<title>
Algorithme - Python - Chap1: ANALYSER UN PROBL&#x00C8;ME
</title>

<!-- Made with executable version 7.0 Release 3 Build 0 -->

<!-- The following insertion allows you to add your own code directly to this head tag from the configuration screen -->



<style>


/* This is the CSS stylesheet used in the exercise. */
/* Elements in square brackets are replaced by data based on configuration settings when the exercise is built. */

/* BeginCorePageCSS */

/* Made with executable version 7.0 Release 3 Build 0 */



/* CSS variables for colours. */
:root{
	--strFontFace:       Arial,"Comic Sans MS",Geneva,sans-serif;
	--strFontSize:       medium;
	--strTextColor:      #000000;
	--strTitleColor:     #000000;

	--strFuncLightColor: #ffffff;
	--strFuncShadeColor: #7f7f7f;
	--strLinkColor:      #0000FF;
	--strVLinkColor:     #0000CC;
	
	--strNavBarColor:    #000000;
	--strNavLightColor:  #7f7f7f;
	--strNavShadeColor:  #000000;
	--strNavTextColor:   #ffffff;
	
	--strPageBGColor:    #C0C0C0;
	--strExBGColor:      #FFFFFF;
}

body{
	font-family: var(--strFontFace);
	background-color: var(--strPageBGColor);
	color: var(--strTextColor);
 
	margin-right: 5%;
	margin-left: 5%;
	font-size: var(--strFontSize);
	padding-bottom: 0.5em;
}

p{
	text-align: left;
	margin: 0px;
	font-size: 1em;
}

table,div,span,td{
	font-size: 1em;
	color: var(--strTextColor);
}

div.Titles{
	padding: 0.5em;;
	text-align: center;
	color: var(--strTitleColor);
}

button{
	font-family: var(--strFontFace);
	font-size: 1em;
	display: inline;
}

.ExerciseTitle{
	font-size: 140%;
	color: var(--strTitleColor);
}

.ExerciseSubtitle{
	font-size: 120%;
	color: var(--strTitleColor);
}

div.StdDiv, div.ExerciseContainer, div.ReadingContainer{
	background-color: var(--strExBGColor);
	text-align: center;
	font-size: 1em;
	color: var(--strTextColor);
	padding: 0.5em;
	border-style: solid;
	border-width: 1px 1px 1px 1px;
	border-color: var(--strTextColor);
	margin-bottom: 1px;
}

div.ReadingContainer, div.ExerciseContainer{
	min-width: 15em;
	flex-grow: 1;
	flex-basis: 0;
	margin: 1px;
}

div#ContainerDiv{
	margin: -1px;
	padding: 0;
	border: none;
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	justify-content: space-between;
}

/* EndCorePageCSS */

.RTLText{
	text-align: right;
	font-size: 150%;
	direction: rtl;
	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--strFontFace); 
}

.CentredRTLText{
	text-align: center;
	font-size: 150%;
	direction: rtl;
	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--strFontFace); 
}

button p.RTLText{
	text-align: center;
}

.RTLGapBox{
	text-align: right;
	font-size: 150%;
	direction: rtl;
	font-family: "Times New Roman", var(--strFontFace);
}

.Guess{
	font-weight: bold;
}

.CorrectAnswer{
	font-weight: bold;
}

div#Timer{
	padding: 0.25em;
	margin-left: auto;
	margin-right: auto;
	text-align: center;
	color: var(--strTitleColor);
}

span#TimerText{
	padding: 0.25em;
	border-width: 1px;
	border-style: solid;
	font-weight: bold;
	display: none;
	color: var(--strTitleColor);
}

span.Instructions{

}

div.ExerciseText{

}

.FeedbackText, .FeedbackText span.CorrectAnswer, .FeedbackText span.Guess, .FeedbackText span.Answer{
	color: var(--strTitleColor);
}

.LeftItem{
	font-size: 1em;
	color: var(--strTextColor);
	text-align: left;
}

.RightItem{
	font-weight: bold;
	font-size: 1em;
	color: var(--strTextColor);
	text-align: left;
}

span.CorrectMark{

}

input, textarea{
	font-family: var(--strFontFace);
	font-size: 120%;
}

select{
	font-size: 1em;
}

div.Feedback {
	background-color: var(--strPageBGColor);
	left: 33%;
	width: 34%;
	top: 33%;
	z-index: 1;
	border-style: solid;
	border-width: 1px;
	padding: 5px;
	text-align: center;
	color: var(--strTitleColor);
	position: absolute;
	display: none;
	font-size: 1em;
}




div.ExerciseDiv{
	color: var(--strTextColor);
}

/* JMatch standard output table. */
table.MatchTable{
	margin: 2em auto; 
	border-width: 0;
}

/* JMatch flashcard styles */
table.FlashcardTable{
	background-color: transparent;
	color: var(--strTextColor);
	border-color: var(--strTextColor);
	margin-left: auto;
	margin-right: auto;
	margin-top: 2em;
	margin-bottom: 2em;
	/*width: 90%;*/
	position: relative;
	text-align: center;
	padding: 0px;
}

table.FlashcardTable tr{
	border-style: none;
	margin: 0px;
	padding: 0px;
	background-color: var(--strExBGColor);
}

table.FlashcardTable td.Showing{
	font-size: 140%;
	text-align: center;
	width: 50%;
	display: table-cell;
	padding: 2em;
	margin: 0px;
	border-style: solid;
	border-width: 1px;
	border-radius: 0.5em;
	color: var(--strTextColor);
	box-shadow: 0.2em 0.3em 0.2em var(--strNavShadeColor);
	background-color: var(--strPageBGColor);
}

table.FlashcardTable td.Hidden{
	display: none;
}

/* JMix styles */
div.JMixDrag, div.JMatchDrag{
	padding: 0;
	background-color: var(--strPageBGColor);
	border-style: none;
}

div#GuessDiv{
	padding: 0.5em;
	margin-bottom: 2em;
}

div#SegmentDiv{
	margin-top: 2em;
	margin-bottom: 2em;
	text-align: center;
}

a.ExSegment{
	font-size: 120%;
	font-weight: bold;
	text-decoration: none;
	color: var(--strTextColor);
	display: inline-block;
	padding: 0.5em;
	border: solid 1pt gray;
	margin-bottom: 0.5em;
}

span.RemainingWordList{
	font-style: italic;
}

div.DropLine {
	position: absolute;
	text-align: left;
	border-bottom-style: solid;
	border-bottom-width: 1px;
	border-bottom-color: var(--strTitleColor);
	width: 80%;
	left: 10%;
}

/* JCloze styles */

.ClozeWordList{
	text-align: center;
	font-weight: bold;
}

div.ClozeBody{
	text-align: left;
	margin-top: 2em;
	margin-bottom: 2em;
	line-height: 2.0
}

span.GapSpan{
	font-weight: bold;
}

/* JCross styles */

table.CrosswordGrid{
	margin: auto auto 1em auto;
	border-collapse: collapse;
	padding: 0px;
	background-color: #000000;
}

table.CrosswordGrid tbody tr td{
	width: 1.5em;
	height: 1.5em;
	text-align: center;
	vertical-align: middle;
	font-size: 140%;
	padding: 1px;
	margin: 0px;
	border-style: solid;
	border-width: 1px;
	border-color: #000000;
	color: #000000;
}

table.CrosswordGrid span{
	color: #000000;
}

table.CrosswordGrid td.BlankCell{
	background-color: #000000;
	color: #000000;
}

table.CrosswordGrid td.LetterOnlyCell{
	text-align: center;
	vertical-align: middle;
	background-color: #ffffff;
	color: #000000;
	font-weight: bold;
}

table.CrosswordGrid td.NumLetterCell{
	text-align: left;
	vertical-align: top;
	background-color: #ffffff;
	color: #000000;
	padding: 1px;
	font-weight: bold;
}

.NumLetterCellText{
	cursor: pointer;
	color: #000000;
}

.GridNum{
	vertical-align: super;
	font-size: 66%;
	font-weight: bold;
	text-decoration: none;
	color: #000000;
}

.GridNum:hover, .GridNum:visited{
	color: #000000;
}

table#Clues{
	margin: auto;
	vertical-align: top;
}

table#Clues td{
	vertical-align: top;
}

table.ClueList{
  margin: auto;
}

td.ClueNum{
	text-align: right;
	font-weight: bold;
	vertical-align: top;
}

td.Clue{
	text-align: left;
}

div#ClueEntry{
	text-align: left;
	margin-bottom: 1em;
}

/* Keypad styles */

div.Keypad{
	text-align: center;
	display: none; /* initially hidden, shown if needed */
	margin-bottom: 0.5em;
}

div.Keypad button{
	font-family: var(--strFontFace);
	font-size: 120%;
	background-color: #ffffff;
	color: #000000;
	width: 2em;
	border-style: solid;
	border-width: 1px;
	border-radius: 0.5em;
	color: var(--strTextColor);
	box-shadow: 0.2em 0.3em 0.2em var(--strTextColor);
}

/* JQuiz styles */

div.QuestionNavigation{
	text-align: center;
}

.QNum{
	margin: 0em 1em 0.5em 1em;
	font-weight: bold;
	vertical-align: middle;
}

textarea{
	font-family: var(--strFontFace);
}

.QuestionText{
	text-align: left;
	margin: 0px;
	font-size: 1em;
}

.Answer{
	font-size: 120%;
}

.PartialAnswer{
	font-size: 120%;
	letter-spacing: 0.1em;
	color: var(--strTitleColor);
}

.Highlight{
	color: #000000;
	background-color: #ffff00;
	font-weight: bold;
	font-size: 120%;
}

ol.QuizQuestions{
	text-align: left;
	list-style-type: none;
}

li.QuizQuestion{
	padding: 1em;
	border-style: solid;
	border-width: 0px 0px 1px 0px;
}

ol.MCAnswers{
	text-align: left;
	list-style-type: upper-alpha;
	padding: 1em;
}

ol.MCAnswers li{
	margin-bottom: 1em;
}

ol.MSelAnswers{
	text-align: left;
	list-style-type: lower-alpha;
	padding: 1em;
}

div.ShortAnswer{
	padding: 1em;
}

.FuncButton {
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 3em;

	border-left-color: var(--strFuncLightColor);
	border-top-color: var(--strFuncLightColor);
	border-right-color: var(--strFuncShadeColor);
	border-bottom-color: var(--strFuncShadeColor);
	color: var(--strTextColor);
	background-color: var(--strExBGColor);

	border-width: 1pt;
	cursor: pointer;	
	box-shadow: 0.2em 0.3em 0.2em var(--strFuncShadeColor);
}

.FuncButton:active {
	box-shadow: none;
}

.FuncButton:hover{
	color: var(--strExBGColor);
	background-color: var(--strTextColor);
}

/*BeginNavBarStyle*/

div.NavButtonBar{
	background-color: var(--strNavBarColor);
	text-align: center;
	margin: 0.25rem 0;
	clear: both;
	font-size: 1em;
	padding: 0.2em;
	box-sizing: border-box;
}

.NavButton {
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 3em;
	
	border-left-color: var(--strNavLightColor);
	border-top-color: var(--strNavLightColor);
	border-right-color: var(--strNavShadeColor);
	border-bottom-color: var(--strNavShadeColor); 
	background-color: var(--strNavBarColor);
	color: var(--strNavTextColor);

	border-width: 1pt;
	cursor: pointer;	
	box-shadow: 0.2em 0.3em 0.2em var(--strNavShadeColor);
}

.NavButton:active {
	box-shadow: none;
}

.NavButton:hover{
	color: var(--strNavBarColor);
	background-color: var(--strNavTextColor);
}

/*EndNavBarStyle*/

a{
	color: var(--strLinkColor);
}

a:visited{
	color: var(--strVLinkColor);
}

a:hover{
	color: var(--strLinkColor);
}

div.CardStyle {
	position: absolute;
	font-family: var(--strFontFace);
	font-size: 1em;
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 2em;
	border-width: 1pt;
	color: var(--strTextColor);
	box-shadow: 0.2em 0.3em 0.2em var(--strTextColor);
	background-color: var(--strExBGColor);
	left: -50px;
	top: -50px;
	overflow: visible;
	touch-action: none;
	user-select: none;
	box-sizing: border-box;
}

div.CardStyleCentered{
	text-align: center;
}

.rtl{
	text-align: right;
	font-size: 140%;
}


</style>

<script>

//<![CDATA[

<!--




//CODE FOR HANDLING NAV BUTTONS AND FUNCTION BUTTONS

function FocusAButton(){
	if (document.getElementById('CheckButton1') != null){
		document.getElementById('CheckButton1').focus();
	}
	else{
		if (document.getElementById('CheckButton2') != null){
			document.getElementById('CheckButton2').focus();
		}
		else{
			document.getElementsByTagName('button')[0].focus();
		}
	}
}




//CODE FOR HANDLING DISPLAY OF POPUP FEEDBACK BOX

var topZ = 1000;

function ShowMessage(Feedback){
	var Output = Feedback + '<br /><br />';
	document.getElementById('FeedbackContent').innerHTML = Output;
	var FDiv = document.getElementById('FeedbackDiv');
	topZ++;
	FDiv.style.zIndex = topZ;
	FDiv.style.top = TopSettingWithScrollOffset(30) + 'px';

	FDiv.style.display = 'block';

	ShowElements(false, 'input');
	ShowElements(false, 'select');
	ShowElements(false, 'object');
	ShowElements(true, 'object', 'FeedbackContent');

//Focus the OK button
	setTimeout("document.getElementById('FeedbackOKButton').focus()", 50);
	
//
}

function ShowElements(Show, TagName, ContainerToReverse){
// added third argument to allow objects in the feedback box to appear
//IE bug -- hide all the form elements that will show through the popup
//FF on Mac bug : doesn't redisplay objects whose visibility is set to visible
//unless the object's display property is changed

	//get container object (by Id passed in, or use document otherwise)
	TopNode = document.getElementById(ContainerToReverse);
	var Els;
	if (TopNode != null) {
		Els = TopNode.getElementsByTagName(TagName);
	} else {
		Els = document.getElementsByTagName(TagName);
	}

	for (var i=0; i<Els.length; i++){
		if (TagName == "object") {
			//manipulate object elements in all browsers
			if (Show == true){
				Els[i].style.visibility = 'visible';
			}
			else{
				Els[i].style.visibility = 'hidden';
			}
		} 
	}
}



function HideFeedback(){
	document.getElementById('FeedbackDiv').style.display = 'none';
	ShowElements(true, 'input');
	ShowElements(true, 'select');
	ShowElements(true, 'object');
}


//GENERAL UTILITY FUNCTIONS AND VARIABLES

//PAGE DIMENSION FUNCTIONS
function PageDim(){
//Get the page width and height
	this.W = 600;
	this.H = 400;
	this.W = document.getElementsByTagName('body')[0].offsetWidth;
	this.H = document.getElementsByTagName('body')[0].offsetHeight;
}

var pg = null;

function GetPageXY(El) {
	var XY = {x: 0, y: 0};
	while(El){
		XY.x += El.offsetLeft;
		XY.y += El.offsetTop;
		El = El.offsetParent;
	}
	return XY;
}

function GetScrollTop(){
	if (typeof(window.pageYOffset) == 'number'){
		return window.pageYOffset;
	}
	else{
		if ((document.body)&&(document.body.scrollTop)){
			return document.body.scrollTop;
		}
		else{
			if ((document.documentElement)&&(document.documentElement.scrollTop)){
				return document.documentElement.scrollTop;
			}
			else{
				return 0;
			}
		}
	}
}

function GetViewportHeight(){
	if (typeof window.innerHeight != 'undefined'){
		return window.innerHeight;
	}
	else{
		if (((typeof document.documentElement != 'undefined')&&(typeof document.documentElement.clientHeight !=
     'undefined'))&&(document.documentElement.clientHeight != 0)){
			return document.documentElement.clientHeight;
		}
		else{
			return document.getElementsByTagName('body')[0].clientHeight;
		}
	}
}

function TopSettingWithScrollOffset(TopPercent){
	var T = Math.floor(GetViewportHeight() * (TopPercent/100));
	return GetScrollTop() + T; 
}

//CODE FOR AVOIDING LOSS OF DATA WHEN BACKSPACE KEY INVOKES history.back()
var InTextBox = false;

function SuppressBackspace(e){ 
	if (InTextBox == true){return;}
	thisKey = e.keyCode;

	var Suppress = false;

	if (thisKey == 8) {
		Suppress = true;
		e.preventDefault();
	}
}

window.addEventListener('keypress',SuppressBackspace,false);

function ReduceItems(InArray, ReduceToSize){
	var ItemToDump=0;
	var j=0;
	while (InArray.length > ReduceToSize){
		ItemToDump = Math.floor(InArray.length*Math.random());
		InArray.splice(ItemToDump, 1);
	}
}

function Shuffle(InArray){
	var Num;
	var Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < (j-1); k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteToInstructions(Feedback) {
	document.getElementById('InstructionsDiv').innerHTML = Feedback;

}




function EscapeDoubleQuotes(InString){
	return InString.replace(/"/g, '&quot;')
}

function TrimString(InString){
        var x = 0;

        if (InString.length != 0) {
                while ((InString.charAt(InString.length - 1) == '\u0020') || (InString.charAt(InString.length - 1) == '\u000A') || (InString.charAt(InString.length - 1) == '\u000D')){
                        InString = InString.substring(0, InString.length - 1)
                }

                while ((InString.charAt(0) == '\u0020') || (InString.charAt(0) == '\u000A') || (InString.charAt(0) == '\u000D')){
                        InString = InString.substring(1, InString.length)
                }

                while (InString.indexOf('  ') != -1) {
                        x = InString.indexOf('  ')
                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length)
                 }

                return InString;
        }

        else {
                return '';
        }
}

function FindLongest(InArray){
	if (InArray.length < 1){return -1;}

	var Longest = 0;
	for (var i=1; i<InArray.length; i++){
		if (InArray[i].length > InArray[Longest].length){
			Longest = i;
		}
	}
	return Longest;
}

//SELECTION OBJECT FOR TYPING WITH KEYPAD
var selObj = null;
            
SelObj = function(box){
	this.box = box;
	this.selStart = this.box.selectionStart;
	this.selEnd = this.box.selectionEnd;
	this.selText = this.box.value.substring(this.selStart, this.selEnd);
	return this;
}

function setSelText(newText){
	var caretPos = this.selStart + newText.length;
	var newValue = this.box.value.substring(0, this.selStart);
	newValue += newText;
	newValue += this.box.value.substring(this.selEnd, this.box.value.length);
	this.box.value = newValue;
	this.box.setSelectionRange(caretPos, caretPos);
	this.box.focus();
}
SelObj.prototype.setSelText = setSelText;

function setSelSelectionRange(start, end){
	this.box.setSelectionRange(start, end);
}
SelObj.prototype.setSelSelectionRange = setSelSelectionRange;

//UNICODE CHARACTER FUNCTIONS
function IsCombiningDiacritic(CharNum){
	var Result = (((CharNum >= 0x0300)&&(CharNum <= 0x370))||((CharNum >= 0x20d0)&&(CharNum <= 0x20ff)));
	Result = Result || (((CharNum >= 0x3099)&&(CharNum <= 0x309a))||((CharNum >= 0xfe20)&&(CharNum <= 0xfe23)));
	return Result;
}

function IsCJK(CharNum){
	return ((CharNum >= 0x3000)&&(CharNum < 0xd800));
}

//SETUP FUNCTIONS
//BROWSER WILL REFILL TEXT BOXES FROM CACHE IF NOT PREVENTED
function ClearTextBoxes(){
	var NList = document.getElementsByTagName('input');
	for (var i=0; i<NList.length; i++){
		if ((NList[i].id.indexOf('Guess') > -1)||(NList[i].id.indexOf('Gap') > -1)){
			NList[i].value = '';
		}
		if (NList[i].id.indexOf('Chk') > -1){
			NList[i].checked = '';
		}
	}
}







//JQUIZ CORE JAVASCRIPT CODE

var CurrQNum = 0;
var CorrectIndicator = '&#x2714;';
var IncorrectIndicator = '&#x2718;';
var YourScoreIs = 'Your score is ';

//New for 6.2.2.0
var CompletedSoFar = 'Questions completed so far: ';
var ExerciseCompleted = 'You have completed the exercise.';
var ShowCompletedSoFar = true;

var ContinuousScoring = true;
var CorrectFirstTime = 'Questions answered correctly first time: ';
var ShowCorrectFirstTime = true;
var ShuffleQs = true;
var ShuffleAs = true;
var DefaultRight = 'Correct!';
var DefaultWrong = 'Sorry! Try again.';
var QsToShow = 12;
var Score = 0;
var Finished = false;
var Qs = null;
var QArray = new Array();
var ShowingAllQuestions = false;
var ShowAllQuestionsCaption = 'Show all questions';
var ShowOneByOneCaption = 'Show questions one by one';
var State = new Array();
var Feedback = '';
var TimeOver = false;
var strInstructions = '';
var Locked = false;

//The following variable can be used to add a message explaining that
//the question is finished, so no further marking will take place.
var strQuestionFinished = '';

function CompleteEmptyFeedback(){
	var QNum, ANum;
	for (QNum=0; QNum<I.length; QNum++){
//Only do this if not multi-select
		if (I[QNum][2] != '3'){
  		for (ANum = 0; ANum<I[QNum][3].length; ANum++){
  			if (I[QNum][3][ANum][1].length < 1){
  				if (I[QNum][3][ANum][2] > 0){
  					I[QNum][3][ANum][1] = DefaultRight;
  				}
  				else{
  					I[QNum][3][ANum][1] = DefaultWrong;
  				}
  			}
  		}
		}
	}
}

function SetUpQuestions(){
	var AList = new Array(); 
	var QList = new Array();
	var i, j;
	Qs = document.getElementById('Questions');
	while (Qs.getElementsByTagName('li').length > 0){
		QList.push(Qs.removeChild(Qs.getElementsByTagName('li')[0]));
	}
	var DumpItem = 0;
	if (QsToShow > QList.length){
		QsToShow = QList.length;
	}
	while (QsToShow < QList.length){
		DumpItem = Math.floor(QList.length*Math.random());
		for (j=DumpItem; j<(QList.length-1); j++){
			QList[j] = QList[j+1];
		}
		QList.length = QList.length-1;
	}
	if (ShuffleQs == true){
		QList = Shuffle(QList);
	}
	if (ShuffleAs == true){
		var As;
		for (var i=0; i<QList.length; i++){
			As = QList[i].getElementsByTagName('ol')[0];
			if (As != null){
  			AList.length = 0;
				while (As.getElementsByTagName('li').length > 0){
					AList.push(As.removeChild(As.getElementsByTagName('li')[0]));
				}
				AList = Shuffle(AList);
				for (j=0; j<AList.length; j++){
					As.appendChild(AList[j]);
				}
			}
		}
	}
	
	for (i=0; i<QList.length; i++){
		Qs.appendChild(QList[i]);
		QArray[QArray.length] = QList[i];
	}

//Show the first item
	QArray[0].style.display = '';
	
//Now hide all except the first item
	for (i=1; i<QArray.length; i++){
		QArray[i].style.display = 'none';
	}		
	SetQNumReadout();
	
	SetFocusToTextbox();
}

function SetFocusToTextbox(){
//if there's a textbox, set the focus in it
	if (QArray[CurrQNum].getElementsByTagName('input')[0] != null){
		QArray[CurrQNum].getElementsByTagName('input')[0].focus();
//and show a keypad if there is one
		if (document.getElementById('CharacterKeypad') != null){
			document.getElementById('CharacterKeypad').style.display = 'block';
		}
	}
	else{
  	if (QArray[CurrQNum].getElementsByTagName('textarea')[0] != null){
  		QArray[CurrQNum].getElementsByTagName('textarea')[0].focus();	
//and show a keypad if there is one
			if (document.getElementById('CharacterKeypad') != null){
				document.getElementById('CharacterKeypad').style.display = 'block';
			}
		}
//This added for 6.0.4.11: hide accented character buttons if no textbox
		else{
			if (document.getElementById('CharacterKeypad') != null){
				document.getElementById('CharacterKeypad').style.display = 'none';
			}
		}
	}
}

function ChangeQ(ChangeBy){
//The following line prevents moving to another question until the current
//question is answered correctly. Uncomment it to enable this behaviour. 
//	if (State[CurrQNum][0] == -1){return;}
	if (((CurrQNum + ChangeBy) < 0)||((CurrQNum + ChangeBy) >= QArray.length)){return;}
	QArray[CurrQNum].style.display = 'none';
	CurrQNum += ChangeBy;
	QArray[CurrQNum].style.display = '';
//Undocumented function added 10/12/2004
	ShowSpecialReadingForQuestion();
	SetQNumReadout();
	SetFocusToTextbox();
}

var HiddenReadingShown = false;
function ShowSpecialReadingForQuestion(){
//Undocumented function for showing specific reading text elements which change with each question
//Added on 10/12/2004
	if (document.getElementById('ReadingDiv') != null){
		if (HiddenReadingShown == true){
			document.getElementById('ReadingDiv').innerHTML = '';
		}
		if (QArray[CurrQNum] != null){
//Fix for 6.0.4.25
			var Children = QArray[CurrQNum].getElementsByTagName('div');
			for (var i=0; i<Children.length; i++){
			if (Children[i].className=="HiddenReading"){
					document.getElementById('ReadingDiv').innerHTML = Children[i].innerHTML;
					HiddenReadingShown = true;
//Hide the ShowAllQuestions button to avoid confusion
					if (document.getElementById('ShowMethodButton') != null){
						document.getElementById('ShowMethodButton').style.display = 'none';
					}
				}
			}	
		}
	}
}

function SetQNumReadout(){
	document.getElementById('QNumReadout').innerHTML = (CurrQNum+1) + ' / ' + QArray.length;
	if ((CurrQNum+1) >= QArray.length){
		if (document.getElementById('NextQButton') != null){
			document.getElementById('NextQButton').style.visibility = 'hidden';
		}
	}
	else{
		if (document.getElementById('NextQButton') != null){
			document.getElementById('NextQButton').style.visibility = 'visible';
		}
	}
	if (CurrQNum <= 0){
		if (document.getElementById('PrevQButton') != null){
			document.getElementById('PrevQButton').style.visibility = 'hidden';
		}
	}
	else{
		if (document.getElementById('PrevQButton') != null){
			document.getElementById('PrevQButton').style.visibility = 'visible';
		}
	}
}

var I=new Array();
I[0]=new Array();I[0][0]=100;
I[0][1]='';
I[0][2]='0';
I[0][3]=new Array();
I[0][3][0]=new Array('R\u00E9solution du probl\u00E8me (conception et r\u00E9alisation de la solution)','',0,0,1);
I[0][3][1]=new Array('Evaluation de la solution','',0,0,1);
I[0][3][2]=new Array('Analyse du probl\u00E8me','L\u2019analyse du probl\u00E8me consiste \u00E0 bien comprendre l\u2019\u00E9nonc\u00E9 du probl\u00E8me, \u00E0 d\u00E9terminer les dimensions du probl\u00E8me (entr\u00E9es et sorties), \u00E0 d\u00E9terminer la m\u00E9thode de sa r\u00E9solution par d\u00E9composition et raffinements successifs, et \u00E0 d\u00E9terminer les formules de calculs, les r\u00E8gles de gestion, etc. C\u2019est la premi\u00E8re \u00E9tape cruciale du processus de mod\u00E9lisation d\u2019un probl\u00E8me.',1,100,1);
I[0][3][3]=new Array('Impl\u00E9mentation du programme','',0,0,1);
I[1]=new Array();I[1][0]=100;
I[1][1]='';
I[1][2]='0';
I[1][3]=new Array();
I[1][3][0]=new Array('Un algorithme est une description sch\u00E9matique d\u2019un probl\u00E8me, tandis qu\u2019un programme informatique est une description textuelle d\u2019un probl\u00E8me.','',0,0,1);
I[1][3][1]=new Array('Un algorithme est une description textuelle d\u2019un probl\u00E8me, tandis qu\u2019un programme informatique est une description sch\u00E9matique d\u2019un probl\u00E8me.','',0,0,1);
I[1][3][2]=new Array('Un algorithme est une solution \u00E0 un probl\u00E8me sous la forme d\u2019un encha\u00EEnement d\u2019op\u00E9rations \u00E0 effectuer, tandis qu\u2019un programme informatique est une impl\u00E9mentation de cet algorithme dans un langage de programmation sp\u00E9cifique.','Un algorithme peut \u00EAtre \u00E9crit en langage naturel, en pseudocode ou en organigramme, mais il n\u2019est pas li\u00E9 \u00E0 un langage de programmation particulier. Un programme informatique est une traduction de l\u2019algorithme dans un langage compr\u00E9hensible par l\u2019ordinateur, comme Python, Java ou C++.',1,100,1);
I[1][3][3]=new Array('Un algorithme est une impl\u00E9mentation d\u2019un programme informatique dans un langage de programmation sp\u00E9cifique, tandis qu\u2019un programme informatique est une solution \u00E0 un probl\u00E8me sous la forme d\u2019un encha\u00EEnement d\u2019op\u00E9rations \u00E0 effectuer.','',0,0,1);
I[2]=new Array();I[2][0]=100;
I[2][1]='';
I[2][2]='0';
I[2][3]=new Array();
I[2][3][0]=new Array('S\u00E9quentiel, conditionnel et it\u00E9ratif','Le traitement s\u00E9quentiel consiste \u00E0 ex\u00E9cuter les instructions les unes apr\u00E8s les autres dans l\u2019ordre donn\u00E9. Le traitement conditionnel consiste \u00E0 ex\u00E9cuter des instructions diff\u00E9rentes selon qu\u2019une condition est vraie ou fausse. Le traitement it\u00E9ratif consiste \u00E0 r\u00E9p\u00E9ter un bloc d\u2019instructions tant qu\u2019une condition est v\u00E9rifi\u00E9e.',1,100,1);
I[2][3][1]=new Array('S\u00E9quentiel, r\u00E9cursif et parall\u00E8le','',0,0,1);
I[2][3][2]=new Array('Conditionnel, it\u00E9ratif et r\u00E9cursif','',0,0,1);
I[2][3][3]=new Array('Conditionnel, parall\u00E8le et r\u00E9cursif','',0,0,1);
I[3]=new Array();I[3][0]=100;
I[3][1]='';
I[3][2]='0';
I[3][3]=new Array();
I[3][3][0]=new Array('Une boucle positive teste la condition avant d\u2019ex\u00E9cuter le bloc d\u2019instructions, tandis qu\u2019une boucle n\u00E9gative teste la condition apr\u00E8s avoir ex\u00E9cut\u00E9 le bloc d\u2019instructions.','',0,0,1);
I[3][3][1]=new Array('Une boucle positive teste la condition apr\u00E8s avoir ex\u00E9cut\u00E9 le bloc d\u2019instructions, tandis qu\u2019une boucle n\u00E9gative teste la condition avant d\u2019ex\u00E9cuter le bloc d\u2019instructions.','Par exemple, en C++, une boucle while est une boucle n\u00E9gative, car elle v\u00E9rifie la condition au d\u00E9but de chaque it\u00E9ration. Une boucle do-while est une boucle positive, car elle v\u00E9rifie la condition \u00E0 la fin de chaque it\u00E9ration',1,100,1);
I[3][3][2]=new Array(') Une boucle positive ex\u00E9cute le bloc d\u2019instructions au moins une fois, tandis qu\u2019une boucle n\u00E9gative peut ne pas ex\u00E9cuter le bloc d\u2019instructions du tout.','',0,0,1);
I[3][3][3]=new Array('Une boucle positive peut ne pas ex\u00E9cuter le bloc d\u2019instructions du tout, tandis qu\u2019une boucle n\u00E9gative ex\u00E9cute le bloc d\u2019instructions','',0,0,1);
I[4]=new Array();I[4][0]=100;
I[4][1]='';
I[4][2]='0';
I[4][3]=new Array();
I[4][3][0]=new Array('Un probl\u00E8me est une situation qui n\u00E9cessite une action pour atteindre un objectif.','',0,0,1);
I[4][3][1]=new Array('Un probl\u00E8me est une question qui appelle une r\u00E9ponse unique et exacte.','',0,0,1);
I[4][3][2]=new Array('Un probl\u00E8me est une t\u00E2che qui consiste \u00E0 trouver une solution \u00E0 partir de donn\u00E9es et de contraintes.','Un probl\u00E8me en algorithmique peut \u00EAtre d\u00E9fini comme une t\u00E2che qui consiste \u00E0 trouver une solution \u00E0 partir de donn\u00E9es (entr\u00E9es) et de contraintes (sorties attendues, r\u00E8gles de gestion, etc.). La solution peut \u00EAtre exprim\u00E9e sous la forme d\u2019un algorithme, c\u2019est-\u00E0-dire d\u2019un encha\u00EEnement d\u2019op\u00E9rations \u00E0 effectuer.',1,100,1);
I[4][3][3]=new Array('Un probl\u00E8me est un d\u00E9fi qui stimule la cr\u00E9ativit\u00E9 et l\u2019innovation.','',0,0,1);
I[5]=new Array();I[5][0]=100;
I[5][1]='';
I[5][2]='0';
I[5][3]=new Array();
I[5][3][0]=new Array('Un probl\u00E8me est une description g\u00E9n\u00E9rale d\u2019une t\u00E2che \u00E0 accomplir, tandis qu\u2019une instance d\u2019un probl\u00E8me est une r\u00E9alisation particuli\u00E8re de cette t\u00E2che avec des valeurs sp\u00E9cifiques pour les donn\u00E9es.','Un probl\u00E8me en algorithmique peut \u00EAtre vu comme une famille d\u2019instances du m\u00EAme type, qui partagent la m\u00EAme structure mais diff\u00E8rent par les valeurs des donn\u00E9es. Par exemple, le probl\u00E8me du tri consiste \u00E0 ranger dans l\u2019ordre croissant ou d\u00E9croissant une liste de nombres. Une instance du probl\u00E8me du tri serait de trier la liste [3, 7, 1, 4, 9].',1,100,1);
I[5][3][1]=new Array('Un probl\u00E8me est une r\u00E9alisation particuli\u00E8re d\u2019une t\u00E2che avec des valeurs sp\u00E9cifiques pour les donn\u00E9es, tandis qu\u2019une instance d\u2019un probl\u00E8me est une description g\u00E9n\u00E9rale de cette t\u00E2che \u00E0 accomplir.','',0,0,1);
I[5][3][2]=new Array('Un probl\u00E8me est un ensemble de solutions possibles pour une t\u00E2che donn\u00E9e, tandis qu\u2019une instance d\u2019un probl\u00E8me est un choix parmi ces solutions.','',0,0,1);
I[5][3][3]=new Array('Un probl\u00E8me est un choix parmi les solutions possibles pour une t\u00E2che donn\u00E9e, tandis qu\u2019une instance d\u2019un probl\u00E8me est un ensemble de ces solutions.','',0,0,1);
I[6]=new Array();I[6][0]=100;
I[6][1]='';
I[6][2]='0';
I[6][3]=new Array();
I[6][3][0]=new Array('Lire attentivement l\u2019\u00E9nonc\u00E9 du probl\u00E8me, reformuler le probl\u00E8me sous la forme d\u2019une question ou d\u2019un mod\u00E8le math\u00E9matique, identifier les donn\u00E9es d\u2019entr\u00E9e et les r\u00E9sultats attendus, sp\u00E9cifier les relations entre les donn\u00E9es et les r\u00E9sultats.','L\u2019analyse d\u2019un probl\u00E8me en algorithmique suit g\u00E9n\u00E9ralement ces quatre \u00E9tapes : lire attentivement l\u2019\u00E9nonc\u00E9 du probl\u00E8me pour le',1,100,1);
I[6][3][1]=new Array('Identifier les donn\u00E9es d\u2019entr\u00E9e et les r\u00E9sultats attendus, lire attentivement l\u2019\u00E9nonc\u00E9 du probl\u00E8me, reformuler le probl\u00E8me sous la forme d\u2019un mod\u00E8le math\u00E9matique ou d\u2019une question, sp\u00E9cifier les relations entre les r\u00E9sultats et les donn\u00E9es.','',0,0,1);
I[6][3][2]=new Array('Sp\u00E9cifier les relations entre les donn\u00E9es et les r\u00E9sultats, identifier les donn\u00E9es d\u2019entr\u00E9e et les r\u00E9sultats attendus, lire attentivement l\u2019\u00E9nonc\u00E9 du probl\u00E8me, reformuler le probl\u00E8me sous la forme d\u2019une question ou d\u2019un mod\u00E8le math\u00E9matique.','',0,0,1);
I[6][3][3]=new Array('Reformuler le probl\u00E8me sous la forme d\u2019un mod\u00E8le math\u00E9matique ou d\u2019une question, sp\u00E9cifier les relations entre les r\u00E9sultats et les donn\u00E9es, identifier les donn\u00E9es d\u2019entr\u00E9e et les r\u00E9sultats attendus, lire attentivement l\u2019\u00E9nonc\u00E9 du probl\u00E8me.','',0,0,1);
I[7]=new Array();I[7][0]=100;
I[7][1]='';
I[7][2]='0';
I[7][3]=new Array();
I[7][3][0]=new Array('Stocker une valeur temporaire lors de l\u2019\u00E9change des \u00E9l\u00E9ments du tableau','La variable temp est utilis\u00E9e pour stocker la valeur de l\u2019\u00E9l\u00E9ment courant (tab[j]) avant de le remplacer par la valeur de l\u2019\u00E9l\u00E9ment suivant (tab[j + 1]). Cela permet de ne pas perdre la valeur initiale de tab[j] et de la r\u00E9affecter \u00E0 tab[j + 1].',1,100,1);
I[7][3][1]=new Array('Stocker la taille du tableau','',0,0,1);
I[7][3][2]=new Array('Stocker le nombre d\u2019it\u00E9rations de la boucle de tri','',0,0,1);
I[7][3][3]=new Array('Stocker le plus petit \u00E9l\u00E9ment du tableau','',0,0,1);
I[8]=new Array();I[8][0]=100;
I[8][1]='';
I[8][2]='0';
I[8][3]=new Array();
I[8][3][0]=new Array('n','',0,0,1);
I[8][3][1]=new Array('n - 1','La variable i parcourt le tableau de 1 \u00E0 n - 1, car il n\u2019est pas n\u00E9cessaire de comparer le dernier \u00E9l\u00E9ment avec lui-m\u00EAme. A chaque it\u00E9ration, le plus grand \u00E9l\u00E9ment du tableau non tri\u00E9 est plac\u00E9 \u00E0 la fin du tableau.',1,100,1);
I[8][3][2]=new Array('n - 2','',0,0,1);
I[8][3][3]=new Array('n - i','',0,0,1);
I[9]=new Array();I[9][0]=100;
I[9][1]='';
I[9][2]='0';
I[9][3]=new Array();
I[9][3][0]=new Array('tab[j] < tab[j + 1]','',0,0,1);
I[9][3][1]=new Array('tab[j] > tab[j + 1]','La condition qui permet d\u2019\u00E9changer deux \u00E9l\u00E9ments du tableau est que l\u2019\u00E9l\u00E9ment courant (tab[j]) soit plus grand que l\u2019\u00E9l\u00E9ment suivant (tab[j + 1]). Cela garantit que le tableau soit tri\u00E9 par ordre croissant \u00E0 la fin de l\u2019algorithme.',1,100,1);
I[9][3][2]=new Array('tab[j] = tab[j + 1]','',0,0,1);
I[9][3][3]=new Array('tab[j] != tab[j + 1]','',0,0,1);
I[10]=new Array();I[10][0]=100;
I[10][1]='';
I[10][2]='0';
I[10][3]=new Array();
I[10][3][0]=new Array('O(n)','',0,0,1);
I[10][3][1]=new Array('O(n log n)','',0,0,1);
I[10][3][2]=new Array('O(n^2)','La complexit\u00E9 temporelle du tri \u00E0 bulles dans le pire des cas est O(n^2), car il faut effectuer n - 1 it\u00E9rations de la boucle externe, et \u00E0 chaque it\u00E9ration, il faut effectuer n - i comparaisons dans la boucle interne. Le nombre total d\u2019op\u00E9rations est donc proportionnel \u00E0 n * (n - 1), ce qui est \u00E9quivalent \u00E0 O(n^2).',1,100,1);
I[10][3][3]=new Array('O(2^n)','',0,0,1);
I[11]=new Array();I[11][0]=100;
I[11][1]='';
I[11][2]='0';
I[11][3]=new Array();
I[11][3][0]=new Array('Il est plus rapide','',0,0,1);
I[11][3][1]=new Array('Il est plus simple','',0,0,1);
I[11][3][2]=new Array('Il est plus stable','Le tri \u00E0 bulles est un algorithme de tri stable, ce qui signifie qu\u2019il conserve l\u2019ordre relatif des \u00E9l\u00E9ments \u00E9gaux dans le tableau. Par exemple, si le tableau contient des paires (nom, note), le tri \u00E0 bulles ne changera pas l\u2019ordre des \u00E9l\u00E8ves ayant la m\u00EAme note. Ce n\u2019est pas le cas de tous les algorithmes de tri, comme le tri rapide ou le tri par s\u00E9lection.',1,100,1);
I[11][3][3]=new Array('Il est plus efficace','',0,0,1);


function StartUp(){

//If there's only one question, no need for question navigation controls
	if (QsToShow < 2){
		document.getElementById('QNav').style.display = 'none';
	}
	
//Stash the instructions so they can be redisplayed
	strInstructions = document.getElementById('InstructionsDiv').innerHTML;
	

	

	

	
	CompleteEmptyFeedback();

	SetUpQuestions();
	ClearTextBoxes();
	CreateStatusArray();
	

	setTimeout('StartTimer()', 50);

	
//Check search string for q parameter
	if (document.location.search.length > 0){
		if (ShuffleQs == false){
			var JumpTo = parseInt(document.location.search.substring(1,document.location.search.length))-1;
			if (JumpTo <= QsToShow){
				ChangeQ(JumpTo);
			}
		}
	}
//Undocumented function added 10/12/2004
	ShowSpecialReadingForQuestion();
}

function ShowHideQuestions(){
	document.getElementById('ShowMethodButton').style.display = 'none';
	if (ShowingAllQuestions == false){
		for (var i=0; i<QArray.length; i++){
				QArray[i].style.display = '';
			}
		document.getElementById('Questions').style.listStyleType = 'decimal';
		document.getElementById('OneByOneReadout').style.display = 'none';
		document.getElementById('ShowMethodButton').innerHTML = ShowOneByOneCaption;
		ShowingAllQuestions = true;
	}
	else{
		for (var i=0; i<QArray.length; i++){
				if (i != CurrQNum){
					QArray[i].style.display = 'none';
				}
			}
		document.getElementById('Questions').style.listStyleType = 'none';
		document.getElementById('OneByOneReadout').style.display = '';
		document.getElementById('ShowMethodButton').innerHTML = ShowAllQuestionsCaption;
		ShowingAllQuestions = false;	
	}
	document.getElementById('ShowMethodButton').style.display = 'inline';
}

function CreateStatusArray(){
	var QNum, ANum;
//For each item in the item array
	for (QNum=0; QNum<I.length; QNum++){
//Check if the question still exists (hasn't been nuked by showing a random selection)
		if (document.getElementById('Q_' + QNum) != null){
			State[QNum] = new Array();
			State[QNum][0] = -1; //Score for this q; -1 shows question not done yet
			State[QNum][1] = new Array(); //answers
			for (ANum = 0; ANum<I[QNum][3].length; ANum++){
				State[QNum][1][ANum] = 0; //answer not chosen yet; when chosen, will store its position in the series of choices
			}
			State[QNum][2] = 0; //tries at this q so far
			State[QNum][3] = 0; //incrementing percent-correct values of selected answers
			State[QNum][4] = 0; //penalties incurred for hints
			State[QNum][5] = ''; //Sequence of answers chosen by number
		}
		else{
			State[QNum] = null;
		}
	}
}



function CheckMCAnswer(QNum, ANum, Btn){
//if question doesn't exist, bail
	if (State[QNum].length < 1){return;}
	
//Get the feedback
	Feedback = I[QNum][3][ANum][1];
	
//Now show feedback and bail if question already complete
	if (State[QNum][0] > -1){
//Add an extra message explaining that the question
// is finished if defined by the user
		if (strQuestionFinished.length > 0){Feedback += '<br />' + strQuestionFinished;}
//Show the feedback
		ShowMessage(Feedback);
//New for 6.2.2.1: If you want to mark an answer as correct even when it's the final choice, uncomment this line.
//		if (I[QNum][3][ANum][2] >= 1){Btn.innerHTML = CorrectIndicator;}else{Btn.innerHTML = IncorrectIndicator;}	
		return;
	}
	
//Hide the button while processing
	Btn.style.display = 'none';

//Increment the number of tries
	State[QNum][2]++;
	
//Add the percent-correct value of this answer
	State[QNum][3] += I[QNum][3][ANum][3];
	
//Store the try number in the answer part of the State array, for tracking purposes
	State[QNum][1][ANum] = State[QNum][2];
	if (State[QNum][5].length > 0){State[QNum][5] += ' | ';}
	State[QNum][5] += String.fromCharCode(65+ANum);
	
//Should this answer be accepted as correct?
	if (I[QNum][3][ANum][2] < 1){
//It's wrong

//Mark the answer
		Btn.innerHTML = IncorrectIndicator;
		
//Remove any previous score unless exercise is finished (6.0.3.8+)
		if (Finished == false){
			WriteToInstructions(strInstructions);
		}	
		
//Check whether this leaves just one MC answer unselected, in which case the Q is terminated
		var RemainingAnswer = FinalAnswer(QNum);
		if (RemainingAnswer > -1){
//Behave as if the last answer had been selected, but give no credit for it
//Increment the number of tries
			State[QNum][2]++;		
		
//Calculate the score for this question
			CalculateMCQuestionScore(QNum);
			
//Get the overall score and add it to the feedback
			CalculateOverallScore();
//New for 6.2.2.1
			var QsDone = CheckQuestionsCompleted();
			if ((ContinuousScoring == true)||(Finished == true)){
				Feedback += '<br />' + YourScoreIs + ' ' + Score + '%.' + '<br />' + QsDone;
				WriteToInstructions(YourScoreIs + ' ' + Score + '%.' + '<br />' + QsDone);
			}
			else{
				WriteToInstructions(QsDone);
			}
		}
	}
	else{
//It's right
//Mark the answer
		Btn.innerHTML = CorrectIndicator;
				
//Calculate the score for this question
		CalculateMCQuestionScore(QNum);
		
//New for 6.2.2.0
		var QsDone = CheckQuestionsCompleted();

//Get the overall score and add it to the feedback
		if (ContinuousScoring == true){
			CalculateOverallScore();
			if ((ContinuousScoring == true)||(Finished == true)){
				Feedback += '<br />' + YourScoreIs + ' ' + Score + '%.' + '<br />' + QsDone;
				WriteToInstructions(YourScoreIs + ' ' + Score + '%.' + '<br />' + QsDone);
			}
		}
		else{
			WriteToInstructions(QsDone);
		}
	}
	
//Show the button again
	Btn.style.display = 'inline';
	
//Finally, show the feedback	
	ShowMessage(Feedback);
	
//Check whether all questions are now done
	CheckFinished();
}

function CalculateMCQuestionScore(QNum){
	var Tries = State[QNum][2] + State[QNum][4]; //include tries and hint penalties
	var PercentCorrect = State[QNum][3];
	var TotAns = GetTotalMCAnswers(QNum);
	var HintPenalties = State[QNum][4];
	
//Make sure it's not already complete

	if (State[QNum][0] < 0){
//Allow for Hybrids
		if (HintPenalties >= 1){
			State[QNum][0] = 0;
		}
		else{
//This line calculates the score for this question
			if (TotAns == 1){
				State[QNum][0] = 1;
			}
			else{
				State[QNum][0] = ((TotAns-((Tries*100)/State[QNum][3]))/(TotAns-1));
			}
		}
//Fix for Safari bug added for version 6.0.3.42 (negative infinity problem)
		if ((State[QNum][0] < 0)||(State[QNum][0] == Number.NEGATIVE_INFINITY)){
			State[QNum][0] = 0;
		}
	}
}

function GetTotalMCAnswers(QNum){
	var Result = 0;
	for (var ANum=0; ANum<I[QNum][3].length; ANum++){
		if (I[QNum][3][ANum][4] == 1){ //This is an MC answer
			Result++;
		}
	}
	return Result;
}

function FinalAnswer(QNum){
	var UnchosenAnswers = 0;
	var FinalAnswer = -1;
	for (var ANum=0; ANum<I[QNum][3].length; ANum++){
		if (I[QNum][3][ANum][4] == 1){ //This is an MC answer
			if (State[QNum][1][ANum] < 1){ //This answer hasn't been chosen yet
				UnchosenAnswers++;
				FinalAnswer = ANum;
			}
		}
	}
	if (UnchosenAnswers == 1){
		return FinalAnswer;
	}
	else{
		return -1;
	}
}





function CalculateOverallScore(){
	var TotalWeighting = 0;
	var TotalScore = 0;
	
	for (var QNum=0; QNum<State.length; QNum++){
		if (State[QNum] != null){
			if (State[QNum][0] > -1){
				TotalWeighting += I[QNum][0];
				TotalScore += (I[QNum][0] * State[QNum][0]);
			}
		}
	}
	if (TotalWeighting > 0){
		Score = Math.floor((TotalScore/TotalWeighting)*100);
	}
	else{
//if TotalWeighting is 0, no questions so far have any value, so 
//no penalty should be shown.
		Score = 100; 
	}
}

//New for 6.2.2.0
function CheckQuestionsCompleted(){
	if (ShowCompletedSoFar == false){return '';}
	var QsCompleted = 0;
	for (var QNum=0; QNum<State.length; QNum++){
		if (State[QNum] != null){
			if (State[QNum][0] >= 0){
				QsCompleted++;
			}
		}
	}
//Fixes for 6.2.2.2
	if (QsCompleted >= QArray.length){
		return ExerciseCompleted;
	}
	else{
		return CompletedSoFar + ' ' + QsCompleted + '/' + QArray.length + '.';
	}
}

function CheckFinished(){
	var FB = '';
	var AllDone = true;
	for (var QNum=0; QNum<State.length; QNum++){
		if (State[QNum] != null){
			if (State[QNum][0] < 0){
				AllDone = false;
			}
		}
	}
	if (AllDone == true){
	
//Report final score and submit if necessary
		CalculateOverallScore();
		FB = YourScoreIs + ' ' + Score + '%.';
		if (ShowCorrectFirstTime == true){
			var CFT = 0;
			for (QNum=0; QNum<State.length; QNum++){
				if (State[QNum] != null){
					if (State[QNum][0] >= 1){
						CFT++;
					}
				}
			}
			FB += '<br />' + CorrectFirstTime + ' ' + CFT + '/' + QsToShow;
		}
		
//New for 6.2.2.0
		FB += '<br />' + ExerciseCompleted;
		
		WriteToInstructions(FB);
		
		Finished == true;

		window.clearInterval(Interval);




		TimeOver = true;
		Locked = true;
		


		Finished = true;
		Detail = '<?xml version="1.0"?><hpnetresult><fields>';
		for (QNum=0; QNum<State.length; QNum++){
			if (State[QNum] != null){
				if (State[QNum][5].length > 0){
					Detail += '<field><fieldname>Question #' + (QNum+1) + '</fieldname><fieldtype>question-tracking</fieldtype><fieldlabel>Q ' + (QNum+1) + '</fieldlabel><fieldlabelid>QuestionTrackingField</fieldlabelid><fielddata>' + State[QNum][5] + '</fielddata></field>';
				}
			}
		}
		Detail += '</fields></hpnetresult>';
	}

}


function TimesUp(){
	document.getElementById('Timer').innerHTML = 'Your time is over!';

	TimeOver = true;
	Finished = true;
	ShowMessage('Your time is over!');
	
//Set all remaining scores to 0
	for (var QNum=0; QNum<State.length; QNum++){
		if (State[QNum] != null){
			if (State[QNum][0] < 0){
				State[QNum][0] = 0;
			}
		}
	}
	CheckFinished();
}








//CODE FOR HANDLING TIMER
//Timer code
var Seconds = 600;
var Interval = null;

function StartTimer(){
	Interval = window.setInterval('DownTime()',1000);
	document.getElementById('TimerText').style.display = 'inline';
}

function DownTime(){
	var ss = Seconds % 60;
	if (ss<10){
		ss='0' + ss + '';
	}

	var mm = Math.floor(Seconds / 60);

	if (document.getElementById('Timer') == null){
		return;
	}

	document.getElementById('TimerText').innerHTML = mm + ':' + ss;
	if (Seconds < 1){
		window.clearInterval(Interval);
		TimeOver = true;
		TimesUp();
	}
	Seconds--;
}






//-->

//]]>

</script>


</head>

<body onload="StartUp()" id="TheBody" >

<!-- BeginTopNavButtons -->


<div class="NavButtonBar" id="TopNavBar">


<button class="NavButton" onclick="history.back(); return false;">&lt;=</button>



<button class="NavButton" onclick="location='contents.htm'; return false;"> Index </button>



<button class="NavButton" onclick="location='nextpage.htm'; return false;">=&gt;</button>


</div>



<!-- EndTopNavButtons -->

<div class="Titles">
	<h2 class="ExerciseTitle">Algorithme - Python - Chap1: ANALYSER UN PROBL&#x00C8;ME</h2>

	<h3 class="ExerciseSubtitle">Quiz</h3>


<div id="Timer"><span id="TimerText">&#160;&#160;</span></div>


</div>

<div id="InstructionsDiv" class="StdDiv">
	<div id="Instructions"></div>
</div>


<div id="ContainerDiv">



<div class="ExerciseContainer">

<div id="QNav" class="QuestionNavigation">

<p style="text-align: right;">
<button id="ShowMethodButton" class="FuncButton" onclick="ShowHideQuestions(); return false;">Show all questions</button>
</p>

<div id="OneByOneReadout">
<button id="PrevQButton" class="FuncButton" onclick="ChangeQ(-1); return false;">&lt;=</button>

<span id="QNumReadout" class="QNum">&#160;</span>

<button id="NextQButton" class="FuncButton" onclick="ChangeQ(1); return false;">=&gt;</button>
<br />
</div>

</div>
 
<ol class="QuizQuestions" id="Questions">
<li class="QuizQuestion" id="Q_0" style="display: none;"><div class="QuestionText">Quelle est la premi&#x00E8;re &#x00E9;tape du processus de r&#x00E9;solution d&#x2019;un probl&#x00E8;me ?</div><ol class="MCAnswers"><li id="Q_0_0"><button class="FuncButton" id="Q_0_0_Btn" onclick="CheckMCAnswer(0,0,this)">?</button>&#160;&#160;R&#x00E9;solution du probl&#x00E8;me (conception et r&#x00E9;alisation de la solution)</li><li id="Q_0_1"><button class="FuncButton" id="Q_0_1_Btn" onclick="CheckMCAnswer(0,1,this)">?</button>&#160;&#160;Evaluation de la solution</li><li id="Q_0_2"><button class="FuncButton" id="Q_0_2_Btn" onclick="CheckMCAnswer(0,2,this)">?</button>&#160;&#160;Analyse du probl&#x00E8;me</li><li id="Q_0_3"><button class="FuncButton" id="Q_0_3_Btn" onclick="CheckMCAnswer(0,3,this)">?</button>&#160;&#160;Impl&#x00E9;mentation du programme</li></ol></li>
<li class="QuizQuestion" id="Q_1" style="display: none;"><div class="QuestionText">Quelle est la diff&#x00E9;rence entre un algorithme et un programme informatique ?</div><ol class="MCAnswers"><li id="Q_1_0"><button class="FuncButton" id="Q_1_0_Btn" onclick="CheckMCAnswer(1,0,this)">?</button>&#160;&#160;Un algorithme est une description sch&#x00E9;matique d&#x2019;un probl&#x00E8;me, tandis qu&#x2019;un programme informatique est une description textuelle d&#x2019;un probl&#x00E8;me.</li><li id="Q_1_1"><button class="FuncButton" id="Q_1_1_Btn" onclick="CheckMCAnswer(1,1,this)">?</button>&#160;&#160;Un algorithme est une description textuelle d&#x2019;un probl&#x00E8;me, tandis qu&#x2019;un programme informatique est une description sch&#x00E9;matique d&#x2019;un probl&#x00E8;me.</li><li id="Q_1_2"><button class="FuncButton" id="Q_1_2_Btn" onclick="CheckMCAnswer(1,2,this)">?</button>&#160;&#160;Un algorithme est une solution &#x00E0; un probl&#x00E8;me sous la forme d&#x2019;un encha&#x00EE;nement d&#x2019;op&#x00E9;rations &#x00E0; effectuer, tandis qu&#x2019;un programme informatique est une impl&#x00E9;mentation de cet algorithme dans un langage de programmation sp&#x00E9;cifique.</li><li id="Q_1_3"><button class="FuncButton" id="Q_1_3_Btn" onclick="CheckMCAnswer(1,3,this)">?</button>&#160;&#160;Un algorithme est une impl&#x00E9;mentation d&#x2019;un programme informatique dans un langage de programmation sp&#x00E9;cifique, tandis qu&#x2019;un programme informatique est une solution &#x00E0; un probl&#x00E8;me sous la forme d&#x2019;un encha&#x00EE;nement d&#x2019;op&#x00E9;rations &#x00E0; effectuer.</li></ol></li>
<li class="QuizQuestion" id="Q_2" style="display: none;"><div class="QuestionText">Quels sont les trois types de traitement des donn&#x00E9;es en algorithmique ?</div><ol class="MCAnswers"><li id="Q_2_0"><button class="FuncButton" id="Q_2_0_Btn" onclick="CheckMCAnswer(2,0,this)">?</button>&#160;&#160;S&#x00E9;quentiel, conditionnel et it&#x00E9;ratif</li><li id="Q_2_1"><button class="FuncButton" id="Q_2_1_Btn" onclick="CheckMCAnswer(2,1,this)">?</button>&#160;&#160;S&#x00E9;quentiel, r&#x00E9;cursif et parall&#x00E8;le</li><li id="Q_2_2"><button class="FuncButton" id="Q_2_2_Btn" onclick="CheckMCAnswer(2,2,this)">?</button>&#160;&#160;Conditionnel, it&#x00E9;ratif et r&#x00E9;cursif</li><li id="Q_2_3"><button class="FuncButton" id="Q_2_3_Btn" onclick="CheckMCAnswer(2,3,this)">?</button>&#160;&#160;Conditionnel, parall&#x00E8;le et r&#x00E9;cursif</li></ol></li>
<li class="QuizQuestion" id="Q_3" style="display: none;"><div class="QuestionText">Quelle est la diff&#x00E9;rence entre une boucle positive et une boucle n&#x00E9;gative ?</div><ol class="MCAnswers"><li id="Q_3_0"><button class="FuncButton" id="Q_3_0_Btn" onclick="CheckMCAnswer(3,0,this)">?</button>&#160;&#160;Une boucle positive teste la condition avant d&#x2019;ex&#x00E9;cuter le bloc d&#x2019;instructions, tandis qu&#x2019;une boucle n&#x00E9;gative teste la condition apr&#x00E8;s avoir ex&#x00E9;cut&#x00E9; le bloc d&#x2019;instructions.</li><li id="Q_3_1"><button class="FuncButton" id="Q_3_1_Btn" onclick="CheckMCAnswer(3,1,this)">?</button>&#160;&#160;Une boucle positive teste la condition apr&#x00E8;s avoir ex&#x00E9;cut&#x00E9; le bloc d&#x2019;instructions, tandis qu&#x2019;une boucle n&#x00E9;gative teste la condition avant d&#x2019;ex&#x00E9;cuter le bloc d&#x2019;instructions.</li><li id="Q_3_2"><button class="FuncButton" id="Q_3_2_Btn" onclick="CheckMCAnswer(3,2,this)">?</button>&#160;&#160;) Une boucle positive ex&#x00E9;cute le bloc d&#x2019;instructions au moins une fois, tandis qu&#x2019;une boucle n&#x00E9;gative peut ne pas ex&#x00E9;cuter le bloc d&#x2019;instructions du tout.</li><li id="Q_3_3"><button class="FuncButton" id="Q_3_3_Btn" onclick="CheckMCAnswer(3,3,this)">?</button>&#160;&#160;Une boucle positive peut ne pas ex&#x00E9;cuter le bloc d&#x2019;instructions du tout, tandis qu&#x2019;une boucle n&#x00E9;gative ex&#x00E9;cute le bloc d&#x2019;instructions</li></ol></li>
<li class="QuizQuestion" id="Q_4" style="display: none;"><div class="QuestionText">Qu&#x2019;est-ce qu&#x2019;un probl&#x00E8;me en algorithmique ?</div><ol class="MCAnswers"><li id="Q_4_0"><button class="FuncButton" id="Q_4_0_Btn" onclick="CheckMCAnswer(4,0,this)">?</button>&#160;&#160;Un probl&#x00E8;me est une situation qui n&#x00E9;cessite une action pour atteindre un objectif.</li><li id="Q_4_1"><button class="FuncButton" id="Q_4_1_Btn" onclick="CheckMCAnswer(4,1,this)">?</button>&#160;&#160;Un probl&#x00E8;me est une question qui appelle une r&#x00E9;ponse unique et exacte.</li><li id="Q_4_2"><button class="FuncButton" id="Q_4_2_Btn" onclick="CheckMCAnswer(4,2,this)">?</button>&#160;&#160;Un probl&#x00E8;me est une t&#x00E2;che qui consiste &#x00E0; trouver une solution &#x00E0; partir de donn&#x00E9;es et de contraintes.</li><li id="Q_4_3"><button class="FuncButton" id="Q_4_3_Btn" onclick="CheckMCAnswer(4,3,this)">?</button>&#160;&#160;Un probl&#x00E8;me est un d&#x00E9;fi qui stimule la cr&#x00E9;ativit&#x00E9; et l&#x2019;innovation.</li></ol></li>
<li class="QuizQuestion" id="Q_5" style="display: none;"><div class="QuestionText">Quelle est la diff&#x00E9;rence entre un probl&#x00E8;me et une instance d&#x2019;un probl&#x00E8;me ?</div><ol class="MCAnswers"><li id="Q_5_0"><button class="FuncButton" id="Q_5_0_Btn" onclick="CheckMCAnswer(5,0,this)">?</button>&#160;&#160;Un probl&#x00E8;me est une description g&#x00E9;n&#x00E9;rale d&#x2019;une t&#x00E2;che &#x00E0; accomplir, tandis qu&#x2019;une instance d&#x2019;un probl&#x00E8;me est une r&#x00E9;alisation particuli&#x00E8;re de cette t&#x00E2;che avec des valeurs sp&#x00E9;cifiques pour les donn&#x00E9;es.</li><li id="Q_5_1"><button class="FuncButton" id="Q_5_1_Btn" onclick="CheckMCAnswer(5,1,this)">?</button>&#160;&#160;Un probl&#x00E8;me est une r&#x00E9;alisation particuli&#x00E8;re d&#x2019;une t&#x00E2;che avec des valeurs sp&#x00E9;cifiques pour les donn&#x00E9;es, tandis qu&#x2019;une instance d&#x2019;un probl&#x00E8;me est une description g&#x00E9;n&#x00E9;rale de cette t&#x00E2;che &#x00E0; accomplir.</li><li id="Q_5_2"><button class="FuncButton" id="Q_5_2_Btn" onclick="CheckMCAnswer(5,2,this)">?</button>&#160;&#160;Un probl&#x00E8;me est un ensemble de solutions possibles pour une t&#x00E2;che donn&#x00E9;e, tandis qu&#x2019;une instance d&#x2019;un probl&#x00E8;me est un choix parmi ces solutions.</li><li id="Q_5_3"><button class="FuncButton" id="Q_5_3_Btn" onclick="CheckMCAnswer(5,3,this)">?</button>&#160;&#160;Un probl&#x00E8;me est un choix parmi les solutions possibles pour une t&#x00E2;che donn&#x00E9;e, tandis qu&#x2019;une instance d&#x2019;un probl&#x00E8;me est un ensemble de ces solutions.</li></ol></li>
<li class="QuizQuestion" id="Q_6" style="display: none;"><div class="QuestionText">Quelle est la m&#x00E9;thode g&#x00E9;n&#x00E9;rale pour analyser un probl&#x00E8;me en algorithmique ?</div><ol class="MCAnswers"><li id="Q_6_0"><button class="FuncButton" id="Q_6_0_Btn" onclick="CheckMCAnswer(6,0,this)">?</button>&#160;&#160;Lire attentivement l&#x2019;&#x00E9;nonc&#x00E9; du probl&#x00E8;me, reformuler le probl&#x00E8;me sous la forme d&#x2019;une question ou d&#x2019;un mod&#x00E8;le math&#x00E9;matique, identifier les donn&#x00E9;es d&#x2019;entr&#x00E9;e et les r&#x00E9;sultats attendus, sp&#x00E9;cifier les relations entre les donn&#x00E9;es et les r&#x00E9;sultats.</li><li id="Q_6_1"><button class="FuncButton" id="Q_6_1_Btn" onclick="CheckMCAnswer(6,1,this)">?</button>&#160;&#160;Identifier les donn&#x00E9;es d&#x2019;entr&#x00E9;e et les r&#x00E9;sultats attendus, lire attentivement l&#x2019;&#x00E9;nonc&#x00E9; du probl&#x00E8;me, reformuler le probl&#x00E8;me sous la forme d&#x2019;un mod&#x00E8;le math&#x00E9;matique ou d&#x2019;une question, sp&#x00E9;cifier les relations entre les r&#x00E9;sultats et les donn&#x00E9;es.</li><li id="Q_6_2"><button class="FuncButton" id="Q_6_2_Btn" onclick="CheckMCAnswer(6,2,this)">?</button>&#160;&#160;Sp&#x00E9;cifier les relations entre les donn&#x00E9;es et les r&#x00E9;sultats, identifier les donn&#x00E9;es d&#x2019;entr&#x00E9;e et les r&#x00E9;sultats attendus, lire attentivement l&#x2019;&#x00E9;nonc&#x00E9; du probl&#x00E8;me, reformuler le probl&#x00E8;me sous la forme d&#x2019;une question ou d&#x2019;un mod&#x00E8;le math&#x00E9;matique.</li><li id="Q_6_3"><button class="FuncButton" id="Q_6_3_Btn" onclick="CheckMCAnswer(6,3,this)">?</button>&#160;&#160;Reformuler le probl&#x00E8;me sous la forme d&#x2019;un mod&#x00E8;le math&#x00E9;matique ou d&#x2019;une question, sp&#x00E9;cifier les relations entre les r&#x00E9;sultats et les donn&#x00E9;es, identifier les donn&#x00E9;es d&#x2019;entr&#x00E9;e et les r&#x00E9;sultats attendus, lire attentivement l&#x2019;&#x00E9;nonc&#x00E9; du probl&#x00E8;me.</li></ol></li>
<li class="QuizQuestion" id="Q_7" style="display: none;"><div class="QuestionText">Probl&#x00E8;me: Trier un tableau d&#x2019;entiers par ordre croissant <br />// Remplir le tableau avec des entiers al&#x00E9;atoires entre 1 et 100<br />Pour i de 1 &#x00E0; n faire<br /> tab[i] <- EntierAl&#x00E9;atoire(1, 100)<br />FinPour<br /><br />// Afficher le tableau avant le tri<br />Ecrire "Le tableau avant le tri est:"<br />Pour i de 1 &#x00E0; n faire<br /> Ecrire tab[i]<br />FinPour<br /><br />// Trier le tableau par ordre croissant en utilisant la m&#x00E9;thode du tri &#x00E0; bulles<br />Pour i de 1 &#x00E0; n - 1 faire<br /> Pour j de 1 &#x00E0; n - i faire<br /> Si tab[j] > tab[j + 1] alors // si l'&#x00E9;l&#x00E9;ment courant est plus grand que l'&#x00E9;l&#x00E9;ment suivant<br /> // &#x00E9;changer les deux &#x00E9;l&#x00E9;ments<br /> temp &lt;- tab[j]<br /> tab[j] &lt;- tab[j + 1]<br /> tab[j + 1] &lt;- temp<br /> FinSi<br /> FinPour<br />FinPour<br /><br />// Afficher le tableau apr&#x00E8;s le tri<br />Ecrire "Le tableau apr&#x00E8;s le tri est:"<br />Pour i de 1 &#x00E0; n faire<br /> Ecrire tab[i]<br />FinPour<br /><br />Quelle est la fonction de la variable temp ?</div><ol class="MCAnswers"><li id="Q_7_0"><button class="FuncButton" id="Q_7_0_Btn" onclick="CheckMCAnswer(7,0,this)">?</button>&#160;&#160;Stocker une valeur temporaire lors de l&#x2019;&#x00E9;change des &#x00E9;l&#x00E9;ments du tableau</li><li id="Q_7_1"><button class="FuncButton" id="Q_7_1_Btn" onclick="CheckMCAnswer(7,1,this)">?</button>&#160;&#160;Stocker la taille du tableau</li><li id="Q_7_2"><button class="FuncButton" id="Q_7_2_Btn" onclick="CheckMCAnswer(7,2,this)">?</button>&#160;&#160;Stocker le nombre d&#x2019;it&#x00E9;rations de la boucle de tri</li><li id="Q_7_3"><button class="FuncButton" id="Q_7_3_Btn" onclick="CheckMCAnswer(7,3,this)">?</button>&#160;&#160;Stocker le plus petit &#x00E9;l&#x00E9;ment du tableau</li></ol></li>
<li class="QuizQuestion" id="Q_8" style="display: none;"><div class="QuestionText">Quelle est la valeur maximale que peut prendre la variable i dans la boucle de tri ?</div><ol class="MCAnswers"><li id="Q_8_0"><button class="FuncButton" id="Q_8_0_Btn" onclick="CheckMCAnswer(8,0,this)">?</button>&#160;&#160;n</li><li id="Q_8_1"><button class="FuncButton" id="Q_8_1_Btn" onclick="CheckMCAnswer(8,1,this)">?</button>&#160;&#160;n - 1</li><li id="Q_8_2"><button class="FuncButton" id="Q_8_2_Btn" onclick="CheckMCAnswer(8,2,this)">?</button>&#160;&#160;n - 2</li><li id="Q_8_3"><button class="FuncButton" id="Q_8_3_Btn" onclick="CheckMCAnswer(8,3,this)">?</button>&#160;&#160;n - i</li></ol></li>
<li class="QuizQuestion" id="Q_9" style="display: none;"><div class="QuestionText">Quelle est la condition qui permet d&#x2019;&#x00E9;changer deux &#x00E9;l&#x00E9;ments du tableau ?</div><ol class="MCAnswers"><li id="Q_9_0"><button class="FuncButton" id="Q_9_0_Btn" onclick="CheckMCAnswer(9,0,this)">?</button>&#160;&#160;tab[j] &lt; tab[j + 1]</li><li id="Q_9_1"><button class="FuncButton" id="Q_9_1_Btn" onclick="CheckMCAnswer(9,1,this)">?</button>&#160;&#160;tab[j] &gt; tab[j + 1]</li><li id="Q_9_2"><button class="FuncButton" id="Q_9_2_Btn" onclick="CheckMCAnswer(9,2,this)">?</button>&#160;&#160;tab[j] = tab[j + 1]</li><li id="Q_9_3"><button class="FuncButton" id="Q_9_3_Btn" onclick="CheckMCAnswer(9,3,this)">?</button>&#160;&#160;tab[j] != tab[j + 1]</li></ol></li>
<li class="QuizQuestion" id="Q_10" style="display: none;"><div class="QuestionText">Quelle est la complexit&#x00E9; temporelle du tri &#x00E0; bulles dans le pire des cas ?</div><ol class="MCAnswers"><li id="Q_10_0"><button class="FuncButton" id="Q_10_0_Btn" onclick="CheckMCAnswer(10,0,this)">?</button>&#160;&#160;O(n)</li><li id="Q_10_1"><button class="FuncButton" id="Q_10_1_Btn" onclick="CheckMCAnswer(10,1,this)">?</button>&#160;&#160;O(n log n)</li><li id="Q_10_2"><button class="FuncButton" id="Q_10_2_Btn" onclick="CheckMCAnswer(10,2,this)">?</button>&#160;&#160;O(n^2)</li><li id="Q_10_3"><button class="FuncButton" id="Q_10_3_Btn" onclick="CheckMCAnswer(10,3,this)">?</button>&#160;&#160;O(2^n)</li></ol></li>
<li class="QuizQuestion" id="Q_11" style="display: none;"><div class="QuestionText">Quel est l&#x2019;avantage du tri &#x00E0; bulles par rapport aux autres m&#x00E9;thodes de tri ?</div><ol class="MCAnswers"><li id="Q_11_0"><button class="FuncButton" id="Q_11_0_Btn" onclick="CheckMCAnswer(11,0,this)">?</button>&#160;&#160;Il est plus rapide</li><li id="Q_11_1"><button class="FuncButton" id="Q_11_1_Btn" onclick="CheckMCAnswer(11,1,this)">?</button>&#160;&#160;Il est plus simple</li><li id="Q_11_2"><button class="FuncButton" id="Q_11_2_Btn" onclick="CheckMCAnswer(11,2,this)">?</button>&#160;&#160;Il est plus stable</li><li id="Q_11_3"><button class="FuncButton" id="Q_11_3_Btn" onclick="CheckMCAnswer(11,3,this)">?</button>&#160;&#160;Il est plus efficace</li></ol></li></ol>



</div>

</div>

<div class="Feedback" id="FeedbackDiv">
<div class="FeedbackText" id="FeedbackContent"></div>
<button id="FeedbackOKButton" class="FuncButton" onclick="HideFeedback(); return false;">&#160;OK&#160;</button>
</div>

<!-- BeginBottomNavButtons -->


<div class="NavButtonBar" id="BottomNavBar">


<button class="NavButton" onclick="history.back(); return false;">&lt;=</button>



<button class="NavButton" onclick="location='contents.htm'; return false;"> Index </button>



<button class="NavButton" onclick="location='nextpage.htm'; return false;">=&gt;</button>


</div>



<!-- EndBottomNavButtons -->

<!-- BeginSubmissionForm -->

<!-- EndSubmissionForm -->

</body>

</html>
