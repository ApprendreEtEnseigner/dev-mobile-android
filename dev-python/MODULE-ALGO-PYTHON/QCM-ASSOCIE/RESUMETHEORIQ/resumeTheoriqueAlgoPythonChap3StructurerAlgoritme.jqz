<?xml version="1.0" encoding="ISO-8859-1"?>

<hotpot-jquiz-file>
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <rdf:Description rdf:about="">
    <dc:creator>YB SOW</dc:creator>
    <dc:title>Algorithme - Python - Chap3: STRUCTURER UN ALGORITHME</dc:title>
  </rdf:Description>
</rdf:RDF><version>7</version>

<data>
<title>Algorithme - Python - Chap3: STRUCTURER UN ALGORITHME</title>

<timer><seconds>600</seconds><include-timer>1</include-timer></timer>

<reading>
<include-reading>0</include-reading>
<reading-title></reading-title>
<reading-text></reading-text>

</reading>

<questions><question-record><question>Quelle est la diff&amp;#x00E9;rence entre une proc&amp;#x00E9;dure et une fonction?</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>Une proc&amp;#x00E9;dure ne renvoie pas de valeur, alors qu&apos;une fonction renvoie une valeur.</text><feedback>Une proc&amp;#x00E9;dure est un sous-programme qui r&amp;#x00E9;alise une t&amp;#x00E2;che sans renvoyer de r&amp;#x00E9;sultat. Une fonction est un sous-programme qui r&amp;#x00E9;alise une t&amp;#x00E2;che et renvoie un r&amp;#x00E9;sultat. Par exemple, la proc&amp;#x00E9;dure Afficher(x) affiche la valeur de x &amp;#x00E0; l&apos;&amp;#x00E9;cran, mais ne renvoie rien. La fonction Carr&amp;#x00E9;(x) renvoie le carr&amp;#x00E9; de x, mais n&apos;affiche rien.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Une proc&amp;#x00E9;dure renvoie une valeur, alors qu&apos;une fonction ne renvoie pas de valeur.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Une proc&amp;#x00E9;dure et une fonction sont synonymes.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Une proc&amp;#x00E9;dure est un ensemble d&apos;instructions, alors qu&apos;une fonction est un ensemble de donn&amp;#x00E9;es.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quelle est la diff&amp;#x00E9;rence entre un param&amp;#x00E8;tre formel et un param&amp;#x00E8;tre effectif?</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>Un param&amp;#x00E8;tre formel est le nom donn&amp;#x00E9; &amp;#x00E0; un param&amp;#x00E8;tre dans la d&amp;#x00E9;finition d&apos;un sous-programme, alors qu&apos;un param&amp;#x00E8;tre effectif est la valeur ou la variable pass&amp;#x00E9;e &amp;#x00E0; un sous-programme lors de son appel.</text><feedback>Un param&amp;#x00E8;tre formel est une variable locale au sous-programme qui re&amp;#x00E7;oit la valeur ou l&apos;adresse du param&amp;#x00E8;tre effectif lors de l&apos;appel du sous-programme. Par exemple, dans la d&amp;#x00E9;finition de la fonction Carr&amp;#x00E9;(x), x est le param&amp;#x00E8;tre formel. Dans l&apos;appel de la fonction Carr&amp;#x00E9;(5), 5 est le param&amp;#x00E8;tre effectif.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Un param&amp;#x00E8;tre formel est la valeur ou la variable pass&amp;#x00E9;e &amp;#x00E0; un sous-programme lors de son appel, alors qu&apos;un param&amp;#x00E8;tre effectif est le nom donn&amp;#x00E9; &amp;#x00E0; un param&amp;#x00E8;tre dans la d&amp;#x00E9;finition d&apos;un sous-programme.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Un param&amp;#x00E8;tre formel et un param&amp;#x00E8;tre effectif sont synonymes.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Un param&amp;#x00E8;tre formel est le type d&apos;un param&amp;#x00E8;tre, alors qu&apos;un param&amp;#x00E8;tre effectif est le nom d&apos;un param&amp;#x00E8;tre.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quels sont les deux types de passage des param&amp;#x00E8;tres?</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>Par valeur et par r&amp;#x00E9;f&amp;#x00E9;rence.</text><feedback>Le passage des param&amp;#x00E8;tres par valeur consiste &amp;#x00E0; transmettre au sous-programme une copie du param&amp;#x00E8;tre effectif. Le passage des param&amp;#x00E8;tres par r&amp;#x00E9;f&amp;#x00E9;rence consiste &amp;#x00E0; transmettre au sous-programme l&apos;adresse du param&amp;#x00E8;tre effectif. Par exemple, si on appelle la proc&amp;#x00E9;dure Echanger(a,b) avec les variables a=2 et b=3 en passant les param&amp;#x00E8;tres par valeur, les valeurs de a et b ne seront pas modifi&amp;#x00E9;es apr&amp;#x00E8;s l&apos;appel. Si on appelle la m&amp;#x00EA;me proc&amp;#x00E9;dure en passant les param&amp;#x00E8;tres par r&amp;#x00E9;f&amp;#x00E9;rence, les valeurs de a et b seront &amp;#x00E9;chang&amp;#x00E9;es apr&amp;#x00E8;s l&apos;appel.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Par nom et par type.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Par copie et par partage.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Par ordre et par choix.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quelle est la diff&amp;#x00E9;rence entre une variable locale et une variable globale?</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>Une variable locale est d&amp;#x00E9;clar&amp;#x00E9;e dans le corps d&apos;un sous-programme, alors qu&apos;une variable globale est d&amp;#x00E9;clar&amp;#x00E9;e en dehors de tout sous-programme.</text><feedback>Une variable locale n&apos;existe que pendant l&apos;ex&amp;#x00E9;cution du sous-programme dans lequel elle est d&amp;#x00E9;clar&amp;#x00E9;e. Elle n&apos;est pas accessible depuis les autres sous-programmes. Une variable globale existe pendant toute l&apos;ex&amp;#x00E9;cution du programme. Elle est accessible depuis tous les sous-programmes. Par exemple, si on d&amp;#x00E9;clare la variable x=10 en dehors de tout sous-programme, x est une variable globale. Si on d&amp;#x00E9;clare la variable y=20 dans le corps de la proc&amp;#x00E9;dure Afficher(x), y est une variable locale &amp;#x00E0; cette proc&amp;#x00E9;dure.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Une variable locale est d&amp;#x00E9;clar&amp;#x00E9;e en dehors de tout sous-programme, alors qu&apos;une variable globale est d&amp;#x00E9;clar&amp;#x00E9;e dans le corps d&apos;un sous-programme.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Une variable locale et une variable globale sont synonymes.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Une variable locale est d&amp;#x00E9;clar&amp;#x00E9;e avec le mot-cl&amp;#x00E9; local, alors qu&apos;une variable globale est d&amp;#x00E9;clar&amp;#x00E9;e avec le mot-cl&amp;#x00E9; global.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel sera l&apos;affichage du programme suivant?
[pseudo]
// D&amp;#x00E9;claration d&apos;une variable globale
var n = 5
// D&amp;#x00E9;finition d&apos;une fonction qui renvoie le double d&apos;un nombre
fonction Double(x)
    retourner 2*x
fin fonction
// D&amp;#x00E9;finition d&apos;une proc&amp;#x00E9;dure qui affiche le carr&amp;#x00E9; d&apos;un nombre
proc&amp;#x00E9;dure Carr&amp;#x00E9;(x)
    afficher x*x
fin proc&amp;#x00E9;dure
// Programme principal
var m = 10
afficher Double(n) // Affiche le double de n
Carr&amp;#x00E9;(m) // Affiche le carr&amp;#x00E9; de m
n = m // Affecte la valeur de m &amp;#x00E0; n
afficher Double(n) // Affiche le double de n
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>10 100 20</text><feedback>La fonction Double renvoie le double du param&amp;#x00E8;tre effectif pass&amp;#x00E9; lors de son appel. La proc&amp;#x00E9;dure Carr&amp;#x00E9; affiche le carr&amp;#x00E9; du param&amp;#x00E8;tre effectif pass&amp;#x00E9; lors de son appel. Les param&amp;#x00E8;tres sont pass&amp;#x00E9;s par valeur, donc les variables n et m ne sont pas modifi&amp;#x00E9;es par les appels des sous-programmes. La variable n est une variable globale, donc elle est accessible depuis le programme principal et les sous-programmes. La variable m est une variable locale au programme principal, donc elle n&apos;est pas accessible depuis les sous-programmes. L&apos;affichage du programme est donc:
Double(n) = Double(5) = 25 = 10
Carr&amp;#x00E9;(m) = Carr&amp;#x00E9;(10) = afficher 1010 = afficher 100
n = m = n = 10
Double(n) = Double(10) = 2*10 = 20</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>10 100 10</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>5 25 10</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>5 25 20</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel sera l&apos;affichage du programme suivant?
[pseudo]
// D&amp;#x00E9;claration d&apos;une variable globale
var x = 2
// D&amp;#x00E9;finition d&apos;une fonction qui renvoie le cube d&apos;un nombre
fonction Cube(y)
    retourner y*y*y
fin fonction
// D&amp;#x00E9;finition d&apos;une proc&amp;#x00E9;dure qui affiche le produit de deux nombres
proc&amp;#x00E9;dure Produit(a,b)
    afficher a*b
fin proc&amp;#x00E9;dure
// Programme principal
var z = 3
afficher Cube(x) // Affiche le cube de x
Produit(x,z) // Affiche le produit de x et z
x = Cube(z) // Affecte le cube de z &amp;#x00E0; x
afficher x // Affiche x
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>8 6 27</text><feedback>La fonction Cube renvoie le cube du param&amp;#x00E8;tre effectif pass&amp;#x00E9; lors de son appel. La proc&amp;#x00E9;dure Produit affiche le produit des deux param&amp;#x00E8;tres effectifs pass&amp;#x00E9;s lors de son appel. Les param&amp;#x00E8;tres sont pass&amp;#x00E9;s par valeur, donc les variables x, y, z, a et b ne sont pas modifi&amp;#x00E9;es par les appels des sous-programmes. La variable x est une variable globale, donc elle est accessible depuis le programme principal et les sous-programmes. Les variables y, z, a et b sont des variables locales aux sous-programmes dans lesquels elles sont d&amp;#x00E9;clar&amp;#x00E9;es, donc elles ne sont pas accessibles depuis les autres sous-programmes. L&apos;affichage du programme est donc:
Cube(x) = Cube(2) = retourner 222 = retourner 8
Produit(x,z) = Produit(2,3) = afficher 23 = afficher 6
x = Cube(z) = x = Cube(3) = x = retourner 33*3 = x = retourner 27
afficher x = afficher 27</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>8 6 8</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>2 9 27</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>2 9 8</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel sera l&apos;affichage du programme suivant?
[pseudo]
// D&amp;#x00E9;claration d&apos;une variable globale
var a = &quot;Bonjour&quot;
// D&amp;#x00E9;finition d&apos;une fonction qui renvoie la longueur d&apos;une cha&amp;#x00EE;ne de caract&amp;#x00E8;res
fonction Longueur(s)
    var n = 0 // Variable locale qui compte le nombre de caract&amp;#x00E8;res
    tant que s[n] existe // Tant qu&apos;on n&apos;a pas atteint la fin de la cha&amp;#x00EE;ne
        n = n + 1 // On incr&amp;#x00E9;mente le compteur
    fin tant que
    retourner n // On renvoie le compteur
fin fonction
// D&amp;#x00E9;finition d&apos;une proc&amp;#x00E9;dure qui affiche la concat&amp;#x00E9;nation de deux cha&amp;#x00EE;nes de caract&amp;#x00E8;res
proc&amp;#x00E9;dure Concat&amp;#x00E9;ner(s,t)
    afficher s + t // On affiche la somme des deux cha&amp;#x00EE;nes
fin proc&amp;#x00E9;dure
// Programme principal
var b = &quot;le monde&quot;
afficher Longueur(a) // Affiche la longueur de a
Concat&amp;#x00E9;ner(a,b) // Affiche la concat&amp;#x00E9;nation de a et b
a = b // Affecte la valeur de b &amp;#x00E0; a
afficher Longueur(a) // Affiche la longueur de a
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>7 Bonjourle monde 7</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>7 Bonjourle monde 8</text><feedback>La fonction Longueur renvoie le nombre de caract&amp;#x00E8;res d&apos;une cha&amp;#x00EE;ne de caract&amp;#x00E8;res pass&amp;#x00E9;e en param&amp;#x00E8;tre. La proc&amp;#x00E9;dure Concat&amp;#x00E9;ner affiche la somme des deux cha&amp;#x00EE;nes de caract&amp;#x00E8;res pass&amp;#x00E9;es en param&amp;#x00E8;tre. Les param&amp;#x00E8;tres sont pass&amp;#x00E9;s par valeur, donc les variables a et b ne sont pas modifi&amp;#x00E9;es par les appels des sous-programmes. La variable a est une variable globale, donc elle est accessible depuis le programme principal et les sous-programmes. La variable b est une variable locale au programme principal, donc elle n&apos;est pas accessible depuis les sous-programmes. L&apos;affichage du programme est donc:
Longueur(a) = Longueur(&quot;Bonjour&quot;) = 7 (car il y a 7 caract&amp;#x00E8;res dans &quot;Bonjour&quot;)
Concat&amp;#x00E9;ner(a,b) = Concat&amp;#x00E9;ner(&quot;Bonjour&quot;,&quot;le monde&quot;) = afficher &quot;Bonjour&quot; + &quot;le monde&quot; = afficher &quot;Bonjourle monde&quot; (sans espace entre les deux cha&amp;#x00EE;nes)
a = b = a = &quot;le monde&quot;
Longueur(a) = Longueur(&quot;le monde&quot;) = 8 (car il y a 8 caract&amp;#x00E8;res dans &quot;le monde&quot;)</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>7 Bonjour le monde 7</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>7 Bonjour le monde 8</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel sera l&apos;affichage du programme suivant?
[pseudo]
// D&amp;#x00E9;claration d&apos;une variable globale
var k = 1

// D&amp;#x00E9;finition d&apos;une fonction qui renvoie la somme des n premiers entiers naturels
fonction Somme(n)
    var s = 0 // Variable locale qui accumule la somme
    pour i allant de 1 &amp;#x00E0; n // On parcourt les entiers de 1 &amp;#x00E0; n
        s = s + i // On ajoute i &amp;#x00E0; la somme
    fin pour
    retourner s // On renvoie la somme
fin fonction

// D&amp;#x00E9;finition d&apos;une proc&amp;#x00E9;dure qui affiche la factorielle d&apos;un nombre
proc&amp;#x00E9;dure Factorielle(n)
    var f = 1 // Variable locale qui calcule la factorielle
    pour i allant de 1 &amp;#x00E0; n // On parcourt les entiers de 1 &amp;#x00E0; n
        f = f * i // On multiplie f par i
    fin pour
    afficher f // On affiche la factorielle
fin proc&amp;#x00E9;dure

// Programme principal
var m = 4
afficher Somme(k) // Affiche la somme des k premiers entiers naturels
Factorielle(m) // Affiche la factorielle de m
k = m // Affecte la valeur de m &amp;#x00E0; k
afficher Somme(k) // Affiche la somme des k premiers entiers naturels
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>1 24 10</text><feedback>La fonction Somme renvoie la somme des n premiers entiers naturels pass&amp;#x00E9;s en param&amp;#x00E8;tre. La proc&amp;#x00E9;dure Factorielle affiche la factorielle du nombre pass&amp;#x00E9; en param&amp;#x00E8;tre. Les param&amp;#x00E8;tres sont pass&amp;#x00E9;s par valeur, donc les variables k et m ne sont pas modifi&amp;#x00E9;es par les appels des sous-programmes. La variable k est une variable globale, donc elle est accessible depuis le programme principal et les sous-programmes. La variable m est une variable locale au programme principal, donc elle n&apos;est pas accessible depuis les sous-programmes. L&apos;affichage du programme est donc:
Somme(k) = Somme(1) = 1 (car la somme des entiers de 1 &amp;#x00E0; 1 est &amp;#x00E9;gale &amp;#x00E0; 1)
Factorielle(m) = Factorielle(4) = afficher 123*4 = afficher 24 (car la factorielle de 4 est &amp;#x00E9;gale &amp;#x00E0; 24)
k = m = k = 4
Somme(k) = Somme(4) = 10 (car la somme des entiers de 1 &amp;#x00E0; 4 est &amp;#x00E9;gale &amp;#x00E0; 10)</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>1 24 1</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>4 24 10</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>4 24 4</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Qu&apos;est-ce qu&apos;un param&amp;#x00E8;tre formel?</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>Un param&amp;#x00E8;tre utilis&amp;#x00E9; dans la d&amp;#x00E9;finition d&apos;une fonction ou d&apos;une proc&amp;#x00E9;dure.</text><feedback></feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Un param&amp;#x00E8;tre utilis&amp;#x00E9; lors de l&apos;appel d&apos;une fonction ou d&apos;une proc&amp;#x00E9;dure.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Un type de variable locale.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text></text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Qu&apos;est-ce qu&apos;un passage de param&amp;#x00E8;tres par valeur?</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>Le passage d&apos;une copie de la valeur d&apos;un argument &amp;#x00E0; une fonction ou une proc&amp;#x00E9;dure.</text><feedback>Le passage de param&amp;#x00E8;tres par valeur signifie que l&apos;on passe une copie de la valeur d&apos;un argument &amp;#x00E0; une fonction ou une proc&amp;#x00E9;dure.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Le passage d&apos;un pointeur vers l&apos;argument &amp;#x00E0; une fonction ou une proc&amp;#x00E9;dure.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Le passage d&apos;un alias de l&apos;argument &amp;#x00E0; une fonction ou une proc&amp;#x00E9;dure.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text></text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Qu&apos;est-ce qu&apos;une variable locale?</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>Une variable d&amp;#x00E9;finie dans le corps d&apos;une fonction ou d&apos;une proc&amp;#x00E9;dure.</text><feedback>Une variable locale est une variable d&amp;#x00E9;finie dans le corps d&apos;une fonction ou d&apos;une proc&amp;#x00E9;dure et qui n&apos;est accessible que dans ce contexte.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Une variable d&amp;#x00E9;finie en dehors du corps d&apos;une fonction ou d&apos;une proc&amp;#x00E9;dure.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Une variable accessible uniquement dans le corps d&apos;une fonction ou d&apos;une proc&amp;#x00E9;dure.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text></text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat affich&amp;#x00E9; par l&apos;algorithme suivant?

[pseudo]
proc&amp;#x00E9;dure afficher(x : entier)
    x &amp;#x2190; x + 1
    &amp;#x00E9;crire(x)
fin proc&amp;#x00E9;dure

var a : entier
a &amp;#x2190; 5
afficher(a)
&amp;#x00E9;crire(a)
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>6 5</text><feedback>Cette question teste votre compr&amp;#x00E9;hension du passage des param&amp;#x00E8;tres par valeur. Lorsque vous appelez la proc&amp;#x00E9;dure afficher avec le param&amp;#x00E8;tre effectif a, vous cr&amp;#x00E9;ez une copie de la valeur de a dans le param&amp;#x00E8;tre formel x. La modification de x dans la proc&amp;#x00E9;dure n&apos;affecte pas la valeur de a dans le programme principal. Donc, la proc&amp;#x00E9;dure affiche 6, mais la valeur de a reste 5.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>6 6</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>5 6</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>5 5</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat affich&amp;#x00E9; par l&apos;algorithme suivant?

[pseudo]
fonction carr&amp;#x00E9;(x : entier) : entier
    retourner x * x
fin fonction

var a : entier
a &amp;#x2190; 3
a &amp;#x2190; carr&amp;#x00E9;(a)
&amp;#x00E9;crire(a)
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>3</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>6</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>9</text><feedback>Cette question teste votre compr&amp;#x00E9;hension du passage des param&amp;#x00E8;tres par valeur et du retour des fonctions. Lorsque vous appelez la fonction carr&amp;#x00E9; avec le param&amp;#x00E8;tre effectif a, vous cr&amp;#x00E9;ez une copie de la valeur de a dans le param&amp;#x00E8;tre formel x. La fonction retourne le carr&amp;#x00E9; de x, qui est affect&amp;#x00E9; &amp;#x00E0; la variable a dans le programme principal. Donc, la valeur de a devient 9 et c&apos;est ce qui est affich&amp;#x00E9;.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>12</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat affich&amp;#x00E9; par l&apos;algorithme suivant?

[pseudo]
proc&amp;#x00E9;dure &amp;#x00E9;changer(var x : entier, var y : entier)
    var temp : entier
    temp &amp;#x2190; x
    x &amp;#x2190; y
    y &amp;#x2190; temp
fin proc&amp;#x00E9;dure

var a : entier
var b : entier
a &amp;#x2190; 2
b &amp;#x2190; 4
&amp;#x00E9;changer(a, b)
&amp;#x00E9;crire(a, b)
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>2 4</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>4 2</text><feedback>Cette question teste votre compr&amp;#x00E9;hension du passage des param&amp;#x00E8;tres par r&amp;#x00E9;f&amp;#x00E9;rence. Lorsque vous appelez la proc&amp;#x00E9;dure &amp;#x00E9;changer avec les param&amp;#x00E8;tres effectifs a et b, vous passez les adresses des variables a et b aux param&amp;#x00E8;tres formels x et y. La modification de x et y dans la proc&amp;#x00E9;dure affecte directement les valeurs de a et b dans le programme principal. Donc, la proc&amp;#x00E9;dure &amp;#x00E9;change les valeurs de a et b, et affiche 4 et 2.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>2 2</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>4 4</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat affich&amp;#x00E9; par l&apos;algorithme suivant?

[pseudo]
var n : entier

fonction factorielle(n : entier) : entier
    si n = 0 alors
        retourner 1
    sinon
        retourner n * factorielle(n - 1)
    fin si
fin fonction

n &amp;#x2190; 5
&amp;#x00E9;crire(factorielle(n))
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>1</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>5</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>24</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>120</text><feedback>: Cette question teste votre compr&amp;#x00E9;hension du passage des param&amp;#x00E8;tres par valeur et de la r&amp;#x00E9;cursivit&amp;#x00E9; des fonctions. Lorsque vous appelez la fonction factorielle avec le param&amp;#x00E8;tre effectif n, vous cr&amp;#x00E9;ez une copie de la valeur de n dans le param&amp;#x00E8;tre formel n. La fonction appelle elle-m&amp;#x00EA;me avec des valeurs d&amp;#x00E9;croissantes de n jusqu&apos;&amp;#x00E0; atteindre le cas de base n = 0. La fonction retourne alors le produit des valeurs successives de n, qui est le calcul de la factorielle. Donc, la fonction affiche la factorielle de 5, qui est 120.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat affich&amp;#x00E9; par l&apos;algorithme suivant?

[pseudo]
var x : entier

proc&amp;#x00E9;dure incr&amp;#x00E9;menter()
    x &amp;#x2190; x + 1
fin proc&amp;#x00E9;dure

x &amp;#x2190; 0
incr&amp;#x00E9;menter()
&amp;#x00E9;crire(x)
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>0</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>1</text><feedback>Cette question teste votre compr&amp;#x00E9;hension de la notion de variable globale et de variable locale. La variable x est d&amp;#x00E9;clar&amp;#x00E9;e en dehors de toute proc&amp;#x00E9;dure ou fonction, donc c&apos;est une variable globale. Elle est accessible et modifiable dans tout l&apos;algorithme, y compris dans la proc&amp;#x00E9;dure incr&amp;#x00E9;menter. Donc, la proc&amp;#x00E9;dure incr&amp;#x00E9;mente la valeur de x, qui passe de 0 &amp;#x00E0; 1, et c&apos;est ce qui est affich&amp;#x00E9;.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Erreur</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Rien</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat affich&amp;#x00E9; par l&apos;algorithme suivant?

[pseudo]
fonction puissance(x : entier, n : entier) : entier
    var p : entier
    p &amp;#x2190; 1
    pour i de 1 &amp;#x00E0; n faire
        p &amp;#x2190; p * x
    fin pour
    retourner p
fin fonction

var a : entier
var b : entier
a &amp;#x2190; 2
b &amp;#x2190; 3
&amp;#x00E9;crire(puissance(a, b))
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>6</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>8</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>9</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>27</text><feedback>Cette question teste votre compr&amp;#x00E9;hension du passage des param&amp;#x00E8;tres par valeur et des boucles pour. Lorsque vous appelez la fonction puissance avec les param&amp;#x00E8;tres effectifs a et b, vous cr&amp;#x00E9;ez des copies des valeurs de a et b dans les param&amp;#x00E8;tres formels x et n. La fonction calcule la puissance x^n en multipliant x par lui-m&amp;#x00EA;me n fois dans une boucle pour. La fonction retourne le r&amp;#x00E9;sultat, qui est affect&amp;#x00E9; &amp;#x00E0; la variable p dans le programme principal. Donc, la fonction affiche la puissance 2^3, qui est 27.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat affich&amp;#x00E9; par l&apos;algorithme suivant?

[pseudo]
proc&amp;#x00E9;dure afficher_tab(tab : tableau[1..5] d&apos;entiers)
    pour i de 1 &amp;#x00E0; 5 faire
        &amp;#x00E9;crire(tab[i])
    fin pour
fin proc&amp;#x00E9;dure

var t : tableau[1..5] d&apos;entiers
t[1] &amp;#x2190; 10
t[2] &amp;#x2190; 20
t[3] &amp;#x2190; 30
t[4] &amp;#x2190; 40
t[5] &amp;#x2190; 50
afficher_tab(t)
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>10 20 30 40 50</text><feedback>Cette question teste votre compr&amp;#x00E9;hension du passage des param&amp;#x00E8;tres de type tableau. Lorsque vous appelez la proc&amp;#x00E9;dure afficher_tab avec le param&amp;#x00E8;tre effectif t, vous passez l&apos;adresse du premier &amp;#x00E9;l&amp;#x00E9;ment du tableau t au param&amp;#x00E8;tre formel tab. La proc&amp;#x00E9;dure parcourt le tableau tab dans une boucle pour et affiche ses &amp;#x00E9;l&amp;#x00E9;ments. Donc, la proc&amp;#x00E9;dure affiche les &amp;#x00E9;l&amp;#x00E9;ments du tableau t, qui sont 10, 20, 30, 40 et 50.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Erreur: le tableau n&apos;est pas pass&amp;#x00E9; en param&amp;#x00E8;tre par r&amp;#x00E9;f&amp;#x00E9;rence</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Erreur: le tableau n&apos;a pas de taille d&amp;#x00E9;finie dans la proc&amp;#x00E9;dure</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Rien</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat affich&amp;#x00E9; par l&apos;algorithme suivant?

[pseudo]
fonction somme(x : entier, y : entier) : entier
    retourner x + y
fin fonction

var a : entier
var b : entier
a &amp;#x2190; somme(2, 3)
b &amp;#x2190; somme(a, a)
&amp;#x00E9;crire(b)
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>5</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>8</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>10</text><feedback>: Cette question teste votre compr&amp;#x00E9;hension du passage des param&amp;#x00E8;tres par valeur et de l&apos;appel de fonctions. Lorsque vous appelez la fonction somme avec les param&amp;#x00E8;tres effectifs 2 et 3, vous cr&amp;#x00E9;ez des copies des valeurs de 2 et 3 dans les param&amp;#x00E8;tres formels x et y. La fonction retourne la somme de x et y, qui est affect&amp;#x00E9;e &amp;#x00E0; la variable a dans le programme principal. Donc, la valeur de a devient 5. Ensuite, vous appelez &amp;#x00E0; nouveau la fonction somme avec les param&amp;#x00E8;tres effectifs a et a, qui sont des copies de la valeur de a. La fonction retourne la somme de a et a, qui est affect&amp;#x00E9;e &amp;#x00E0; la variable b dans le programme principal. Donc, la valeur de b devient 10 et c&apos;est ce qui est affich&amp;#x00E9;.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Erreur: la fonction somme est appel&amp;#x00E9;e deux fois</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat affich&amp;#x00E9; par l&apos;algorithme suivant?

[pseudo]
proc&amp;#x00E9;dure modifier(var x : entier)
    x &amp;#x2190; x * x - 1
fin proc&amp;#x00E9;dure

var a : entier
var b : entier
a &amp;#x2190; 2
b &amp;#x2190; 3
modifier(a)
modifier(b)
&amp;#x00E9;crire(a, b)
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>2 3</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>3 8</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>4 9</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>3 9</text><feedback>Cette question teste votre compr&amp;#x00E9;hension du passage des param&amp;#x00E8;tres par r&amp;#x00E9;f&amp;#x00E9;rence et de la modification des variables. Lorsque vous appelez la proc&amp;#x00E9;dure modifier avec le param&amp;#x00E8;tre effectif a, vous passez l&apos;adresse de la variable a au param&amp;#x00E8;tre formel x. La proc&amp;#x00E9;dure modifie la valeur de x, qui est la m&amp;#x00EA;me que celle de a, en lui affectant le carr&amp;#x00E9; de x moins 1. Donc, la valeur de a devient 3. De m&amp;#x00EA;me, lorsque vous appelez la proc&amp;#x00E9;dure modifier avec le param&amp;#x00E8;tre effectif b, vous passez l&apos;adresse de la variable b au param&amp;#x00E8;tre formel x. La proc&amp;#x00E9;dure modifie la valeur de x, qui est la m&amp;#x00EA;me que celle de b, en lui affectant le carr&amp;#x00E9; de x moins 1. Donc, la valeur de b devient 9. Finalement, l&apos;algorithme affiche les valeurs de a et b, qui sont 3 et 9.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat affich&amp;#x00E9; par l&apos;algorithme suivant?

[pseudo]
fonction fibonacci(n : entier) : entier
    si n = 0 ou n = 1 alors
        retourner n
    sinon
        retourner fibonacci(n - 1) + fibonacci(n - 2)
    fin si
fin fonction

var k : entier
k &amp;#x2190; 5
&amp;#x00E9;crire(fibonacci(k))
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>3</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>4</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>5</text><feedback>Cette question teste votre compr&amp;#x00E9;hension du passage des param&amp;#x00E8;tres par valeur et de la r&amp;#x00E9;cursivit&amp;#x00E9; des fonctions. Lorsque vous appelez la fonction fibonacci avec le param&amp;#x00E8;tre effectif k, vous cr&amp;#x00E9;ez une copie de la valeur de k dans le param&amp;#x00E8;tre formel n. La fonction appelle elle-m&amp;#x00EA;me avec des valeurs d&amp;#x00E9;croissantes de n jusqu&apos;&amp;#x00E0; atteindre les cas de base n = 0 ou n = 1. La fonction retourne alors la somme des valeurs successives de n, qui est le calcul de la suite de Fibonacci. Donc, la fonction affiche le cinqui&amp;#x00E8;me terme de la suite de Fibonacci, qui est 5.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Erreur: la fonction fibonacci est r&amp;#x00E9;cursive</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record></questions>
</data>

<hotpot-config-file>
<jquiz>
<exercise-subtitle>niveau: difficile</exercise-subtitle>
<instructions>Pour r&amp;#x00E9;ussir le QCM, vous devez avoir au moins  un score de 80%. Bonne chance! </instructions>
<guess-correct>Correct!</guess-correct>
<guess-incorrect>Sorry! Try again.</guess-incorrect>
<partly-incorrect>Your answer is partly wrong: </partly-incorrect>
<enter-a-guess>Please enter a guess.</enter-a-guess>
<next-correct-letter>Next correct letter in the answer: </next-correct-letter>
<correct-answers>Correct answers: </correct-answers>
<show-answer-caption>Show answer</show-answer-caption>
<include-hint>1</include-hint>
<include-show-answer>1</include-show-answer>
<next-ex-url>nextpage.htm</next-ex-url>
<send-email>0</send-email>
<continuous-scoring>1</continuous-scoring>
<show-correct-first-time>1</show-correct-first-time>
<shuffle-questions>1</shuffle-questions>
<shuffle-answers>1</shuffle-answers>
<show-limited-questions>1</show-limited-questions>
<questions-to-show>7</questions-to-show>
<short-answer-tries-on-hybrid-q>2</short-answer-tries-on-hybrid-q>
<separate-javascript-file>0</separate-javascript-file>
<case-sensitive>0</case-sensitive>
<include-keypad>0</include-keypad>
</jquiz>

<global>
<your-score-is>Your score is </your-score-is>
<correct-indicator>&amp;#x2714;</correct-indicator>
<incorrect-indicator>&amp;#x2718;</incorrect-indicator>
<correct-first-time>Questions answered correctly first time: </correct-first-time>
<completed-so-far>Questions completed so far: </completed-so-far>
<exercise-completed>You have completed the exercise.</exercise-completed>
<keypad-characters></keypad-characters>
<times-up>Your time is over!</times-up>
<next-ex-caption>=&amp;#x003E;</next-ex-caption>
<back-caption>&amp;#x003C;=</back-caption>
<contents-caption>Index</contents-caption>
<include-next-ex>1</include-next-ex>
<include-contents>1</include-contents>
<include-back>1</include-back>
<contents-url>contents.htm</contents-url>
<graphic-url></graphic-url>
<font-face>Arial,&quot;Comic Sans MS&quot;,Geneva,sans-serif</font-face>
<font-size>medium</font-size>
<page-bg-color>#C0C0C0</page-bg-color>
<title-color>#000000</title-color>
<ex-bg-color>#000000</ex-bg-color>
<text-color>#000000</text-color>
<link-color>#0000FF</link-color>
<vlink-color>#0000CC</vlink-color>
<nav-bar-color>#000000</nav-bar-color>
<formmail-url>http://yourserver.com/cgi-bin/FormMail.pl</formmail-url>
<email>you@yourserver.com</email>
<name-please>Please enter your name:</name-please>
<user-string-1>one</user-string-1>
<user-string-2>two</user-string-2>
<user-string-3>three</user-string-3>
<header-code></header-code>
<correct-first-time>Questions answered correctly first time: </correct-first-time>
<check-caption>Check</check-caption>
<ok-caption>OK</ok-caption>
<next-q-caption>=&amp;#x003E;</next-q-caption>
<last-q-caption>&amp;#x003C;=</last-q-caption>
<hint-caption>Hint</hint-caption>
<show-all-questions-caption>Show all questions</show-all-questions-caption>
<show-one-by-one-caption>Show questions one by one</show-one-by-one-caption>
<show-also-correct>1</show-also-correct>
<process-for-rtl>0</process-for-rtl>
<include-scorm-12>0</include-scorm-12>
</global>
</hotpot-config-file>
</hotpot-jquiz-file>
