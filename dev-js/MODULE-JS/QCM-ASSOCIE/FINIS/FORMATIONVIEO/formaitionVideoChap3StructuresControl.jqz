<?xml version="1.0" encoding="ISO-8859-1"?>

<hotpot-jquiz-file>
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <rdf:Description rdf:about="">
    <dc:creator>YB SOW</dc:creator>
    <dc:title>Playlist - FormationVid&amp;#x00E9;o - Chap3: les Structures de contr&amp;#x00F4;le</dc:title>
  </rdf:Description>
</rdf:RDF><version>7</version>

<data>
<title>Playlist - FormationVid&amp;#x00E9;o - Chap3: les Structures de contr&amp;#x00F4;le</title>

<timer><seconds>600</seconds><include-timer>1</include-timer></timer>

<reading>
<include-reading>0</include-reading>
<reading-title></reading-title>
<reading-text></reading-text>

</reading>

<questions><question-record><question>Quel est le r&amp;#x00E9;sultat de ce code?
let x = 10;
let y = 20;
if (x &amp;#x003E; y) {
  console.log(&quot;x est plus grand que y&quot;);
} else if (x &amp;#x003C; y) {
  console.log(&quot;x est plus petit que y&quot;);
} else {
  console.log(&quot;x est &amp;#x00E9;gal &amp;#x00E0; y&quot;);
}
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>x est plus grand que y</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>x est plus petit que y</text><feedback>Cette question teste votre compr&amp;#x00E9;hension des op&amp;#x00E9;rateurs de comparaison et des blocs conditionnels. Il faut bien v&amp;#x00E9;rifier la valeur des variables et l&apos;ordre des conditions. Ici, comme x est inf&amp;#x00E9;rieur &amp;#x00E0; y, la premi&amp;#x00E8;re condition est fausse et la deuxi&amp;#x00E8;me condition est vraie, donc le code affiche &quot;x est plus petit que y&quot;.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>x est &amp;#x00E9;gal &amp;#x00E0; y</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Erreur de syntaxe</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>&amp;#x003C;pre&amp;#x003E;
Quel est le r&amp;#x00E9;sultat de ce code?
let a = 5;
let b = 10;
let c = a + b;
switch (c) {
  case 10:
    console.log(&quot;c vaut 10&quot;);
    break;
  case 15:
    console.log(&quot;c vaut 15&quot;);
    break;
  default:
    console.log(&quot;c vaut autre chose&quot;);
}

&amp;#x003C;/pre&amp;#x003E;</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>c vaut 10</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>c vaut 15</text><feedback>Cette question teste votre compr&amp;#x00E9;hension de l&apos;instruction switch, qui permet d&apos;ex&amp;#x00E9;cuter un bloc de code selon la valeur d&apos;une expression. Il faut bien calculer la valeur de c et comparer avec les diff&amp;#x00E9;rentes cases. Ici, comme c vaut 15, le code affiche &quot;c vaut 15&quot;. Il ne faut pas oublier le mot-cl&amp;#x00E9; break pour sortir du switch apr&amp;#x00E8;s avoir trouv&amp;#x00E9; la bonne case.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>c vaut autre chose</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Erreur de syntaxe</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat de ce code?
let i = 0;
while (i &amp;#x003C; 5) {
  i++;
}
console.log(i);
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>0</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>1</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>4</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>5</text><feedback>Cette question teste votre compr&amp;#x00E9;hension de la boucle while, qui permet de r&amp;#x00E9;p&amp;#x00E9;ter un bloc de code tant qu&apos;une condition est vraie. Il faut bien suivre l&apos;&amp;#x00E9;volution de la variable i et le nombre d&apos;it&amp;#x00E9;rations de la boucle. Ici, comme i commence &amp;#x00E0; 0 et s&apos;incr&amp;#x00E9;mente &amp;#x00E0; chaque tour, la boucle s&apos;arr&amp;#x00EA;te quand i vaut 5, donc le code affiche 5.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat de ce code?
let j = 0;
do {
  j++;
} while (j &amp;#x003C; 0);
console.log(j);
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>-1</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>0</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>1</text><feedback>Cette question teste votre compr&amp;#x00E9;hension de la boucle do...while, qui permet de r&amp;#x00E9;p&amp;#x00E9;ter un bloc de code au moins une fois, puis tant qu&apos;une condition est vraie. Il faut bien distinguer cette boucle de la boucle while, qui v&amp;#x00E9;rifie la condition avant d&apos;ex&amp;#x00E9;cuter le bloc. Ici, comme j commence &amp;#x00E0; 0 et s&apos;incr&amp;#x00E9;mente &amp;#x00E0; chaque tour, le bloc s&apos;ex&amp;#x00E9;cute une fois m&amp;#x00EA;me si la condition est fausse, donc le code affiche 1.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Erreur de boucle infinie</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat de ce code?
for (let k = 0; k &amp;#x003C; 3; k++) {
  if (k === 1) {
    continue;
  }
  console.log(k);
}
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>0 1 2</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>0 2</text><feedback>Cette question teste votre compr&amp;#x00E9;hension de la boucle for, qui permet de r&amp;#x00E9;p&amp;#x00E9;ter un bloc de code avec une variable d&apos;it&amp;#x00E9;ration et une condition d&apos;arr&amp;#x00EA;t. Il faut aussi conna&amp;#x00EE;tre le mot-cl&amp;#x00E9; continue, qui permet de passer &amp;#x00E0; l&apos;it&amp;#x00E9;ration suivante sans ex&amp;#x00E9;cuter le reste du bloc. Ici, comme k commence &amp;#x00E0; 0 et s&apos;incr&amp;#x00E9;mente jusqu&apos;&amp;#x00E0; &amp;#x00EA;tre inf&amp;#x00E9;rieur &amp;#x00E0; 3, la boucle s&apos;arr&amp;#x00EA;te quand k vaut 3. Mais quand k vaut 1, le bloc n&apos;affiche pas k et passe &amp;#x00E0; l&apos;it&amp;#x00E9;ration suivante, donc le code affiche 0 puis 2.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>1 2</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>2</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat de ce code?
let x = &quot;10&quot;;
let y = 10;
if (x == y) {
  console.log(&quot;x et y sont &amp;#x00E9;gaux&quot;);
} else {
  console.log(&quot;x et y sont diff&amp;#x00E9;rents&quot;);
}
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>x et y sont &amp;#x00E9;gaux</text><feedback>Cette question teste votre compr&amp;#x00E9;hension de l&apos;op&amp;#x00E9;rateur d&apos;&amp;#x00E9;galit&amp;#x00E9; ==, qui compare la valeur de deux expressions sans tenir compte de leur type. Il faut bien distinguer cet op&amp;#x00E9;rateur de l&apos;op&amp;#x00E9;rateur d&apos;&amp;#x00E9;galit&amp;#x00E9; stricte ===, qui compare aussi le type des expressions. Ici, comme x et y ont la m&amp;#x00EA;me valeur num&amp;#x00E9;rique, m&amp;#x00EA;me si x est une cha&amp;#x00EE;ne de caract&amp;#x00E8;res et y est un nombre, l&apos;op&amp;#x00E9;rateur == renvoie vrai, donc le code affiche &quot;x et y sont &amp;#x00E9;gaux&quot;.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>x et y sont diff&amp;#x00E9;rents</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Erreur de type</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Erreur de syntaxe</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat de ce code?
let a = true;
let b = false;
let c = a &amp;#x0026;&amp;#x0026; b;
if (c) {
  console.log(&quot;c est vrai&quot;);
} else {
  console.log(&quot;c est faux&quot;);
}</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>c est vrai</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>c est faux</text><feedback>Cette question teste votre compr&amp;#x00E9;hension de l&apos;op&amp;#x00E9;rateur logique ET (&amp;#x0026;&amp;#x0026;), qui renvoie vrai si les deux op&amp;#x00E9;randes sont vrais, et faux sinon. Il faut bien conna&amp;#x00EE;tre la table de v&amp;#x00E9;rit&amp;#x00E9; de cet op&amp;#x00E9;rateur et les valeurs bool&amp;#x00E9;ennes des expressions. Ici, comme a est vrai et b est faux, l&apos;op&amp;#x00E9;rateur &amp;#x0026;&amp;#x0026; renvoie faux, donc le code affiche &quot;c est faux&quot;.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Erreur de type</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Erreur de syntaxe</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat de ce code?
let i = 0;
for (; i &amp;#x003C; 5; i++) {
  console.log(i);
}
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>0 1 2 3 4</text><feedback>Cette question teste votre compr&amp;#x00E9;hension de la boucle for, qui permet de r&amp;#x00E9;p&amp;#x00E9;ter un bloc de code avec une variable d&apos;it&amp;#x00E9;ration et une condition d&apos;arr&amp;#x00EA;t. Il faut savoir que la premi&amp;#x00E8;re partie de la boucle for, qui initialise la variable d&apos;it&amp;#x00E9;ration, peut &amp;#x00EA;tre omise si la variable est d&amp;#x00E9;j&amp;#x00E0; d&amp;#x00E9;clar&amp;#x00E9;e et initialis&amp;#x00E9;e avant la boucle. Ici, comme i commence &amp;#x00E0; 0 et s&apos;incr&amp;#x00E9;mente jusqu&apos;&amp;#x00E0; &amp;#x00EA;tre inf&amp;#x00E9;rieur &amp;#x00E0; 5, la boucle s&apos;arr&amp;#x00EA;te quand i vaut 5, donc le code affiche les nombres de 0 &amp;#x00E0; 4.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>0 1 2 3 4 5</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>1 2 3 4 5</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Erreur de syntaxe</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat de ce code?
let j = 0;
while (j &amp;#x003C; 3) {
if (j === 2) {
    break;
  }
  console.log(j);
  j++;
}
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>0 1</text><feedback>Cette question teste votre compr&amp;#x00E9;hension de la boucle while, qui permet de r&amp;#x00E9;p&amp;#x00E9;ter un bloc de code tant qu&apos;une condition est vraie. Il faut aussi conna&amp;#x00EE;tre le mot-cl&amp;#x00E9; break, qui permet de sortir imm&amp;#x00E9;diatement de la boucle sans ex&amp;#x00E9;cuter le reste du bloc. Ici, comme j commence &amp;#x00E0; 0 et s&apos;incr&amp;#x00E9;mente &amp;#x00E0; chaque tour, la boucle s&apos;arr&amp;#x00EA;te quand j vaut 3 ou quand le mot-cl&amp;#x00E9; break est rencontr&amp;#x00E9;. Mais quand j vaut 2, le bloc n&apos;affiche pas j et sort de la boucle, donc le code affiche 0 puis 1.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>0 1 2</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>2</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Erreur de boucle infinie</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le r&amp;#x00E9;sultat de ce code?
let k = 0;
do {
  console.log(k);
} while (++k &amp;#x003C; 3);
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>0 1 2</text><feedback>Cette question teste votre compr&amp;#x00E9;hension de la boucle do...while, qui permet de r&amp;#x00E9;p&amp;#x00E9;ter un bloc de code au moins une fois, puis tant qu&apos;une condition est vraie. Il faut aussi conna&amp;#x00EE;tre la diff&amp;#x00E9;rence entre l&apos;op&amp;#x00E9;rateur d&apos;incr&amp;#x00E9;mentation pr&amp;#x00E9;fix&amp;#x00E9; (++k) et postfix&amp;#x00E9; (k++), qui modifie la valeur de la variable avant ou apr&amp;#x00E8;s son &amp;#x00E9;valuation. Ici, comme k commence &amp;#x00E0; 0 et s&apos;incr&amp;#x00E9;mente avant d&apos;&amp;#x00EA;tre compar&amp;#x00E9; &amp;#x00E0; 3, la boucle s&apos;arr&amp;#x00EA;te quand k vaut 3, donc le code affiche les nombres de 0 &amp;#x00E0; 2.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>0 1</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>1 2</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>1 2 3</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record></questions>
</data>

<hotpot-config-file>
<jquiz>
<exercise-subtitle>Quiz</exercise-subtitle>
<instructions></instructions>
<guess-correct>Correct!</guess-correct>
<guess-incorrect>Sorry! Try again.</guess-incorrect>
<partly-incorrect>Your answer is partly wrong: </partly-incorrect>
<enter-a-guess>Please enter a guess.</enter-a-guess>
<next-correct-letter>Next correct letter in the answer: </next-correct-letter>
<correct-answers>Correct answers: </correct-answers>
<show-answer-caption>Show answer</show-answer-caption>
<include-hint>1</include-hint>
<include-show-answer>1</include-show-answer>
<next-ex-url>nextpage.htm</next-ex-url>
<send-email>0</send-email>
<continuous-scoring>1</continuous-scoring>
<show-correct-first-time>1</show-correct-first-time>
<shuffle-questions>1</shuffle-questions>
<shuffle-answers>1</shuffle-answers>
<show-limited-questions>0</show-limited-questions>
<questions-to-show>2</questions-to-show>
<short-answer-tries-on-hybrid-q>2</short-answer-tries-on-hybrid-q>
<separate-javascript-file>0</separate-javascript-file>
<case-sensitive>0</case-sensitive>
<include-keypad>0</include-keypad>
</jquiz>

<global>
<your-score-is>Your score is </your-score-is>
<correct-indicator>&amp;#x2714;</correct-indicator>
<incorrect-indicator>&amp;#x2718;</incorrect-indicator>
<correct-first-time>Questions answered correctly first time: </correct-first-time>
<completed-so-far>Questions completed so far: </completed-so-far>
<exercise-completed>You have completed the exercise.</exercise-completed>
<keypad-characters></keypad-characters>
<times-up>Your time is over!</times-up>
<next-ex-caption>=&amp;#x003E;</next-ex-caption>
<back-caption>&amp;#x003C;=</back-caption>
<contents-caption>Index</contents-caption>
<include-next-ex>1</include-next-ex>
<include-contents>1</include-contents>
<include-back>1</include-back>
<contents-url>contents.htm</contents-url>
<graphic-url></graphic-url>
<font-face>Arial,&quot;Comic Sans MS&quot;,Geneva,sans-serif</font-face>
<font-size>medium</font-size>
<page-bg-color>#C0C0C0</page-bg-color>
<title-color>#000000</title-color>
<ex-bg-color>#FFFFFF</ex-bg-color>
<text-color>#000000</text-color>
<link-color>#0000FF</link-color>
<vlink-color>#0000CC</vlink-color>
<nav-bar-color>#000000</nav-bar-color>
<formmail-url>http://yourserver.com/cgi-bin/FormMail.pl</formmail-url>
<email>you@yourserver.com</email>
<name-please>Please enter your name:</name-please>
<user-string-1>one</user-string-1>
<user-string-2>two</user-string-2>
<user-string-3>three</user-string-3>
<header-code></header-code>
<correct-first-time>Questions answered correctly first time: </correct-first-time>
<check-caption>Check</check-caption>
<ok-caption>OK</ok-caption>
<next-q-caption>=&amp;#x003E;</next-q-caption>
<last-q-caption>&amp;#x003C;=</last-q-caption>
<hint-caption>Hint</hint-caption>
<show-all-questions-caption>Show all questions</show-all-questions-caption>
<show-one-by-one-caption>Show questions one by one</show-one-by-one-caption>
<show-also-correct>1</show-also-correct>
<process-for-rtl>0</process-for-rtl>
<include-scorm-12>0</include-scorm-12>
</global>
</hotpot-config-file>
</hotpot-jquiz-file>
