<?xml version="1.0" encoding="ISO-8859-1"?>

<hotpot-jquiz-file>
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <rdf:Description rdf:about="">
    <dc:creator>YB SOW</dc:creator>
    <dc:title>Playlist - FormationVid&amp;#x00E9;o - Chap1: les variables</dc:title>
  </rdf:Description>
</rdf:RDF><version>7</version>

<data>
<title>Playlist - FormationVid&amp;#x00E9;o - Chap1: les variables</title>

<timer><seconds>420</seconds><include-timer>1</include-timer></timer>

<reading>
<include-reading>0</include-reading>
<reading-title></reading-title>
<reading-text></reading-text>

</reading>

<questions><question-record><question>Quelle est la diff&amp;#x00E9;rence entre `var` et `let` pour d&amp;#x00E9;clarer une variable?</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>`var` cr&amp;#x00E9;e une variable globale ou locale &amp;#x00E0; la fonction, tandis que `let` cr&amp;#x00E9;e une variable locale au bloc.</text><feedback>B est faux, car `var` ne respecte pas la port&amp;#x00E9;e des blocs. C et D sont faux, car `var` et `let` ont des comportements diff&amp;#x00E9;rents en termes de hoisting, de red&amp;#x00E9;claration et de temporal dead zone.**</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>`var` cr&amp;#x00E9;e une variable locale au bloc, tandis que `let` cr&amp;#x00E9;e une variable globale ou locale &amp;#x00E0; la fonction.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>`var` et `let` sont &amp;#x00E9;quivalents, sauf que `let` est plus r&amp;#x00E9;cent et plus recommand&amp;#x00E9;.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>`var` et `let` sont &amp;#x00E9;quivalents, sauf que `var` est plus r&amp;#x00E9;cent et plus recommand&amp;#x00E9;.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Laquelle de ces affirmation est correcte ?</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>`var` cr&amp;#x00E9;e une variable globale ou locale &amp;#x00E0; la fonction, tandis que `let` cr&amp;#x00E9;e une variable locale au bloc.</text><feedback>B est faux, car `var` ne respecte pas la port&amp;#x00E9;e des blocs. C et D sont faux, car `var` et `let` ont des comportements diff&amp;#x00E9;rents en termes de hoisting, de red&amp;#x00E9;claration et de temporal dead zone.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>`var` cr&amp;#x00E9;e une variable locale au bloc, tandis que `let` cr&amp;#x00E9;e une variable globale ou locale &amp;#x00E0; la fonction.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>`var` et `let` sont &amp;#x00E9;quivalents, sauf que `let` est plus r&amp;#x00E9;cent et plus recommand&amp;#x00E9;.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>`var` et `let` sont &amp;#x00E9;quivalents, sauf que `var` est plus r&amp;#x00E9;cent et plus recommand&amp;#x00E9;.</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quelle est la valeur de `x` apr&amp;#x00E8;s l&apos;ex&amp;#x00E9;cution du code suivant?
var x = 1;
function foo() {
  var x = 2;
  console.log(x);
}
foo();
console.log(x);</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>1</text><feedback>La variable `x` d&amp;#x00E9;clar&amp;#x00E9;e dans la fonction `foo` est locale &amp;#x00E0; la fonction, et n&apos;affecte pas la variable globale `x`. Donc, le code affiche 2 puis 1.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>2</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>undefined</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>ReferenceError</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quelle est la valeur de y apr&amp;#x00E8;s l&apos;ex&amp;#x00E9;cution du code suivant?
var x = 1;
var y = x;
x = 2;
console.log(y);
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>1</text><feedback>Les variables primitives comme les nombres sont copi&amp;#x00E9;es par valeur en JavaScript. Donc, quand on affecte `x` &amp;#x00E0; `y`, on cr&amp;#x00E9;e une nouvelle variable qui contient la m&amp;#x00EA;me valeur que `x`, mais qui n&apos;est pas li&amp;#x00E9;e &amp;#x00E0; `x`. Donc, quand on change la valeur de `x`, cela n&apos;affecte pas la valeur de `y`.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>2</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>undefined</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>ReferenceError</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quelle est la valeur de z apr&amp;#x00E8;s l&apos;ex&amp;#x00E9;cution du code suivant?
var x = {name: &quot;Alice&quot;};
var y = x;
x.name = &quot;Bob&quot;;
console.log(y.name);
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>&quot;Alice&quot;</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>&quot;Bob&quot;</text><feedback>Les variables non primitives comme les objets sont copi&amp;#x00E9;es par r&amp;#x00E9;f&amp;#x00E9;rence en JavaScript. Donc, quand on affecte `x` &amp;#x00E0; `y`, on cr&amp;#x00E9;e une nouvelle variable qui pointe vers le m&amp;#x00EA;me objet que `x`, et qui est donc li&amp;#x00E9;e &amp;#x00E0; `x`. Donc, quand on change la propri&amp;#x00E9;t&amp;#x00E9; de l&apos;objet r&amp;#x00E9;f&amp;#x00E9;renc&amp;#x00E9; par `x`, cela affecte aussi l&apos;objet r&amp;#x00E9;f&amp;#x00E9;renc&amp;#x00E9; par `y`.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>undefined</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>ReferenceError</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quelle est la valeur de a apr&amp;#x00E8;s l&apos;ex&amp;#x00E9;cution du code suivant?
console.log(a);
var a = 1;
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>1</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>undefined</text><feedback>Ce code illustre le ph&amp;#x00E9;nom&amp;#x00E8;ne de hoisting, qui consiste &amp;#x00E0; remonter les d&amp;#x00E9;clarations de variables au d&amp;#x00E9;but du scope. Donc, le code est &amp;#x00E9;quivalent &amp;#x00E0;:
var a;
console.log(a);
a = 1;
Donc, la variable a existe, mais n&apos;a pas encore de valeur d&amp;#x00E9;finie quand on l&apos;affiche.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>null</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>ReferenceError</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quelle est la valeur de `b` apr&amp;#x00E8;s l&apos;ex&amp;#x00E9;cution du code suivant?
console.log(b);
let b = 1;
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>1</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>undefined</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>null</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>ReferenceError</text><feedback>Ce code illustre la notion de temporal dead zone, qui concerne les variables d&amp;#x00E9;clar&amp;#x00E9;es avec `let` ou `const`. Ces variables ne sont pas hoist&amp;#x00E9;es, mais elles exist
console.log(a);
a = 1;
Donc, la variable a existe, mais n&apos;a pas encore de valeur d&amp;#x00E9;finie quand on l&apos;affiche.**</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quelle est la valeur de `b` apr&amp;#x00E8;s l&apos;ex&amp;#x00E9;cution du code suivant?
console.log(b);
let b = 1;
</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>1</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>undefined</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>null</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>ReferenceError</text><feedback>Ce code illustre la notion de temporal dead zone, qui concerne les variables d&amp;#x00E9;clar&amp;#x00E9;es avec `let` ou `const`. Ces variables ne sont pas hoist&amp;#x00E9;es, mais elles exist</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question></question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text></text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text></text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text></text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text></text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question></question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text></text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text></text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text></text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text></text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question></question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text></text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text></text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text></text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text></text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record></questions>
</data>

<hotpot-config-file>
<jquiz>
<exercise-subtitle>Quiz</exercise-subtitle>
<instructions></instructions>
<guess-correct>Correct!</guess-correct>
<guess-incorrect>Sorry! Try again.</guess-incorrect>
<partly-incorrect>Your answer is partly wrong: </partly-incorrect>
<enter-a-guess>Please enter a guess.</enter-a-guess>
<next-correct-letter>Next correct letter in the answer: </next-correct-letter>
<correct-answers>Correct answers: </correct-answers>
<show-answer-caption>Show answer</show-answer-caption>
<include-hint>1</include-hint>
<include-show-answer>1</include-show-answer>
<next-ex-url>nextpage.htm</next-ex-url>
<send-email>0</send-email>
<continuous-scoring>1</continuous-scoring>
<show-correct-first-time>1</show-correct-first-time>
<shuffle-questions>1</shuffle-questions>
<shuffle-answers>1</shuffle-answers>
<show-limited-questions>0</show-limited-questions>
<questions-to-show>2</questions-to-show>
<short-answer-tries-on-hybrid-q>2</short-answer-tries-on-hybrid-q>
<separate-javascript-file>0</separate-javascript-file>
<case-sensitive>0</case-sensitive>
<include-keypad>0</include-keypad>
</jquiz>

<global>
<your-score-is>Your score is </your-score-is>
<correct-indicator>&amp;#x2714;</correct-indicator>
<incorrect-indicator>&amp;#x2718;</incorrect-indicator>
<correct-first-time>Questions answered correctly first time: </correct-first-time>
<completed-so-far>Questions completed so far: </completed-so-far>
<exercise-completed>You have completed the exercise.</exercise-completed>
<keypad-characters></keypad-characters>
<times-up>Your time is over!</times-up>
<next-ex-caption>=&amp;#x003E;</next-ex-caption>
<back-caption>&amp;#x003C;=</back-caption>
<contents-caption>Index</contents-caption>
<include-next-ex>1</include-next-ex>
<include-contents>1</include-contents>
<include-back>1</include-back>
<contents-url>contents.htm</contents-url>
<graphic-url></graphic-url>
<font-face>Arial,&quot;Comic Sans MS&quot;,Geneva,sans-serif</font-face>
<font-size>medium</font-size>
<page-bg-color>#C0C0C0</page-bg-color>
<title-color>#000000</title-color>
<ex-bg-color>#FFFFFF</ex-bg-color>
<text-color>#000000</text-color>
<link-color>#0000FF</link-color>
<vlink-color>#0000CC</vlink-color>
<nav-bar-color>#000000</nav-bar-color>
<formmail-url>http://yourserver.com/cgi-bin/FormMail.pl</formmail-url>
<email>you@yourserver.com</email>
<name-please>Please enter your name:</name-please>
<user-string-1>one</user-string-1>
<user-string-2>two</user-string-2>
<user-string-3>three</user-string-3>
<header-code></header-code>
<correct-first-time>Questions answered correctly first time: </correct-first-time>
<check-caption>Check</check-caption>
<ok-caption>OK</ok-caption>
<next-q-caption>=&amp;#x003E;</next-q-caption>
<last-q-caption>&amp;#x003C;=</last-q-caption>
<hint-caption>Hint</hint-caption>
<show-all-questions-caption>Show all questions</show-all-questions-caption>
<show-one-by-one-caption>Show questions one by one</show-one-by-one-caption>
<show-also-correct>1</show-also-correct>
<process-for-rtl>0</process-for-rtl>
<include-scorm-12>0</include-scorm-12>
</global>
</hotpot-config-file>
</hotpot-jquiz-file>
