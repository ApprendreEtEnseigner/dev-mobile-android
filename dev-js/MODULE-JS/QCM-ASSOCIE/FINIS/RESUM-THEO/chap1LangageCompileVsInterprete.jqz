<?xml version="1.0" encoding="ISO-8859-1"?>

<hotpot-jquiz-file>
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <rdf:Description rdf:about="">
    <dc:creator>YB SOW</dc:creator>
    <dc:title>R&amp;#x00E9;sum&amp;#x00E9; th&amp;#x00E9;orique - Chap 1: COMPARER UN LANGAGE DE SCRIPT AVEC UN LANGAGE COMPIL&amp;#x00C9;</dc:title>
  </rdf:Description>
</rdf:RDF><version>7</version>

<data>
<title>R&amp;#x00E9;sum&amp;#x00E9; th&amp;#x00E9;orique - Chap 1: COMPARER UN LANGAGE DE SCRIPT AVEC UN LANGAGE COMPIL&amp;#x00C9;</title>

<timer><seconds>60</seconds><include-timer>0</include-timer></timer>

<reading>
<include-reading>0</include-reading>
<reading-title></reading-title>
<reading-text></reading-text>

</reading>

<questions><question-record><question>Quelle est la diff&amp;#x00E9;rence principale entre un langage de script et un langage compil&amp;#x00E9; ? </question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>Un langage de script est plus rapide qu&amp;#x2019;un langage compil&amp;#x00E9;</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Un langage de script est interpr&amp;#x00E9;t&amp;#x00E9; ligne par ligne, alors qu&amp;#x2019;un langage compil&amp;#x00E9; est converti en code machine avant l&amp;#x2019;ex&amp;#x00E9;cution</text><feedback>Cette question permet de v&amp;#x00E9;rifier si vous avez compris le concept de compilation et d&amp;#x2019;interpr&amp;#x00E9;tation. Un langage compil&amp;#x00E9; n&amp;#x00E9;cessite une &amp;#x00E9;tape de build, qui transforme le code source en code machine, qui peut ensuite &amp;#x00EA;tre ex&amp;#x00E9;cut&amp;#x00E9; directement par le processeur. Un langage interpr&amp;#x00E9;t&amp;#x00E9; n&amp;#x2019;a pas besoin de cette &amp;#x00E9;tape, mais il requiert un interpr&amp;#x00E9;teur, qui lit et ex&amp;#x00E9;cute le code source ligne par ligne. La vitesse d&amp;#x2019;ex&amp;#x00E9;cution n&amp;#x2019;est pas une caract&amp;#x00E9;ristique intrins&amp;#x00E8;que d&amp;#x2019;un langage, mais elle d&amp;#x00E9;pend de l&amp;#x2019;impl&amp;#x00E9;mentation et de l&amp;#x2019;optimisation du compilateur ou de l&amp;#x2019;interpr&amp;#x00E9;teur. La facilit&amp;#x00E9; d&amp;#x2019;apprentissage et l&amp;#x2019;adaptation aux applications web sont des crit&amp;#x00E8;res subjectifs et d&amp;#x00E9;pendent du contexte et des pr&amp;#x00E9;f&amp;#x00E9;rences du d&amp;#x00E9;veloppeur.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Un langage de script est plus facile &amp;#x00E0; apprendre qu&amp;#x2019;un langage compil&amp;#x00E9;</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Un langage de script est plus adapt&amp;#x00E9; aux applications web qu&amp;#x2019;un langage compil&amp;#x00E9;</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est l&amp;#x2019;avantage d&amp;#x2019;un langage compil&amp;#x00E9; par rapport &amp;#x00E0; un langage interpr&amp;#x00E9;t&amp;#x00E9; ? </question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>Il permet au d&amp;#x00E9;veloppeur de mieux contr&amp;#x00F4;ler les aspects mat&amp;#x00E9;riels, comme la gestion de la m&amp;#x00E9;moire et l&amp;#x2019;utilisation du CPU</text><feedback>Cette question permet de v&amp;#x00E9;rifier si vous avez compris les avantages et les inconv&amp;#x00E9;nients des langages compil&amp;#x00E9;s et interpr&amp;#x00E9;t&amp;#x00E9;s. Un langage compil&amp;#x00E9; offre g&amp;#x00E9;n&amp;#x00E9;ralement plus de performance et d&amp;#x2019;efficacit&amp;#x00E9; qu&amp;#x2019;un langage interpr&amp;#x00E9;t&amp;#x00E9;, car il est directement ex&amp;#x00E9;cut&amp;#x00E9; par le processeur. Il donne aussi plus de contr&amp;#x00F4;le au d&amp;#x00E9;veloppeur sur les ressources mat&amp;#x00E9;rielles utilis&amp;#x00E9;es par le programme. En revanche, un langage compil&amp;#x00E9; n&amp;#x00E9;cessite une &amp;#x00E9;tape de build &amp;#x00E0; chaque modification du code, ce qui peut ralentir le processus de d&amp;#x00E9;veloppement. Il peut aussi &amp;#x00EA;tre moins portable qu&amp;#x2019;un langage interpr&amp;#x00E9;t&amp;#x00E9;, car il d&amp;#x00E9;pend du type de processeur cible. Un langage interpr&amp;#x00E9;t&amp;#x00E9; offre plus de flexibilit&amp;#x00E9; et de portabilit&amp;#x00E9;, car il peut &amp;#x00EA;tre ex&amp;#x00E9;cut&amp;#x00E9; sur n&amp;#x2019;importe quelle plateforme disposant d&amp;#x2019;un interpr&amp;#x00E9;teur compatible. Il peut aussi avoir une syntaxe plus simple et plus expressive qu&amp;#x2019;un langage compil&amp;#x00E9;. En revanche, il peut &amp;#x00EA;tre moins performant et moins efficace qu&amp;#x2019;un langage compil&amp;#x00E9;, car il doit &amp;#x00EA;tre traduit &amp;#x00E0; la vol&amp;#x00E9;e par l&amp;#x2019;interpr&amp;#x00E9;teur.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Il permet au d&amp;#x00E9;veloppeur de modifier le code sans avoir &amp;#x00E0; le recompiler</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Il permet au d&amp;#x00E9;veloppeur d&amp;#x2019;utiliser une syntaxe plus proche du langage naturel</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>) Il permet au d&amp;#x00E9;veloppeur de b&amp;#x00E9;n&amp;#x00E9;ficier d&amp;#x2019;une plus grande portabilit&amp;#x00E9; du code</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le nom du processus qui consiste &amp;#x00E0; convertir un programme &amp;#x00E9;crit dans un langage interpr&amp;#x00E9;t&amp;#x00E9; en code machine pendant l&amp;#x2019;ex&amp;#x00E9;cution ? </question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>La compilation &amp;#x00E0; la vol&amp;#x00E9;e</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>La compilation juste-&amp;#x00E0;-temps</text><feedback>Cette question permet de v&amp;#x00E9;rifier si vous connaissez les techniques d&amp;#x2019;optimisation des langages interpr&amp;#x00E9;t&amp;#x00E9;s. La compilation juste-&amp;#x00E0;-temps (ou JIT pour Just-In-Time) est un processus qui consiste &amp;#x00E0; compiler le code source en code machine pendant l&amp;#x2019;ex&amp;#x00E9;cution, au lieu de l&amp;#x2019;interpr&amp;#x00E9;ter ligne par ligne. Cela permet d&amp;#x2019;am&amp;#x00E9;liorer la performance et l&amp;#x2019;efficacit&amp;#x00E9; des programmes &amp;#x00E9;crits dans des langages</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>La compilation dynamique</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>La compilation incr&amp;#x00E9;mentale</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le nom du processus qui consiste &amp;#x00E0; v&amp;#x00E9;rifier la syntaxe et la s&amp;#x00E9;mantique d&amp;#x2019;un programme &amp;#x00E9;crit dans un langage compil&amp;#x00E9; avant de le convertir en code machine ?</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>L&amp;#x2019;analyse lexicale</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>L&amp;#x2019;analyse syntaxique</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>L&amp;#x2019;analyse s&amp;#x00E9;mantique</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>La compilation</text><feedback>Cette question permet de v&amp;#x00E9;rifier si vous connaissez les &amp;#x00E9;tapes de la compilation. La compilation est le processus qui consiste &amp;#x00E0; transformer un programme &amp;#x00E9;crit dans un langage de haut niveau en code machine. Elle se d&amp;#x00E9;compose en plusieurs phases, dont les principales sont l&amp;#x2019;analyse lexicale, l&amp;#x2019;analyse syntaxique, l&amp;#x2019;analyse s&amp;#x00E9;mantique et la g&amp;#x00E9;n&amp;#x00E9;ration de code. L&amp;#x2019;analyse lexicale d&amp;#x00E9;coupe le code source en unit&amp;#x00E9;s lexicales (mots-cl&amp;#x00E9;s, identificateurs, op&amp;#x00E9;rateurs, etc.). L&amp;#x2019;analyse syntaxique v&amp;#x00E9;rifie que le code source respecte les r&amp;#x00E8;gles grammaticales du langage. L&amp;#x2019;analyse s&amp;#x00E9;mantique v&amp;#x00E9;rifie que le code source a du sens et qu&amp;#x2019;il n&amp;#x2019;y a pas d&amp;#x2019;erreurs logiques (par exemple, des variables non d&amp;#x00E9;clar&amp;#x00E9;es, des types incompatibles, etc.). La g&amp;#x00E9;n&amp;#x00E9;ration de code produit le code machine correspondant au code source.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le nom du processus qui consiste &amp;#x00E0; ex&amp;#x00E9;cuter un programme &amp;#x00E9;crit dans un langage interpr&amp;#x00E9;t&amp;#x00E9; ligne par ligne ? </question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>L&amp;#x2019;&amp;#x00E9;valuation</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>L&amp;#x2019;ex&amp;#x00E9;cution</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>L&amp;#x2019;interpr&amp;#x00E9;tation</text><feedback>Cette question permet de v&amp;#x00E9;rifier si vous connaissez les &amp;#x00E9;tapes de l&amp;#x2019;interpr&amp;#x00E9;tation. L&amp;#x2019;interpr&amp;#x00E9;tation est le processus qui consiste &amp;#x00E0; ex&amp;#x00E9;cuter un programme &amp;#x00E9;crit dans un langage de haut niveau sans le compiler au pr&amp;#x00E9;alable. Elle se fait par l&amp;#x2019;interm&amp;#x00E9;diaire d&amp;#x2019;un programme appel&amp;#x00E9; interpr&amp;#x00E9;teur, qui lit et ex&amp;#x00E9;cute le code source ligne par ligne. L&amp;#x2019;&amp;#x00E9;valuation est une sous-&amp;#x00E9;tape de l&amp;#x2019;interpr&amp;#x00E9;tation, qui consiste &amp;#x00E0; calculer la valeur d&amp;#x2019;une expression (par exemple, une op&amp;#x00E9;ration arithm&amp;#x00E9;tique, une affectation, une comparaison, etc.). L&amp;#x2019;ex&amp;#x00E9;cution est une sous-&amp;#x00E9;tape de l&amp;#x2019;interpr&amp;#x00E9;tation, qui consiste &amp;#x00E0; r&amp;#x00E9;aliser une action (par exemple, afficher un message, appeler une fonction, modifier une variable, etc.). La traduction est un terme g&amp;#x00E9;n&amp;#x00E9;rique qui d&amp;#x00E9;signe la conversion d&amp;#x2019;un langage en un autre (par exemple, la compilation ou la transpilation).</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>La traduction</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quelle est la premi&amp;#x00E8;re phase de la compilation, qui consiste &amp;#x00E0; d&amp;#x00E9;couper le code source en unit&amp;#x00E9;s lexicales ? </question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>L&amp;#x2019;analyse lexicale</text><feedback>Cette question permet de v&amp;#x00E9;rifier si vous connaissez l&amp;#x2019;ordre des phases de la compilation. L&amp;#x2019;analyse lexicale est la premi&amp;#x00E8;re phase, qui consiste &amp;#x00E0; d&amp;#x00E9;couper le code source en unit&amp;#x00E9;s lexicales (ou tokens), comme les mots-cl&amp;#x00E9;s, les identificateurs, les op&amp;#x00E9;rateurs, les litt&amp;#x00E9;raux, etc. Elle permet de simplifier les phases suivantes, qui travaillent sur des tokens plut&amp;#x00F4;t que sur des caract&amp;#x00E8;res. L&amp;#x2019;analyse syntaxique est la deuxi&amp;#x00E8;me phase, qui consiste &amp;#x00E0; v&amp;#x00E9;rifier que le code source respecte les r&amp;#x00E8;gles grammaticales du langage. Elle produit une structure arborescente (ou arbre syntaxique) qui repr&amp;#x00E9;sente la hi&amp;#x00E9;rarchie des tokens. L&amp;#x2019;analyse s&amp;#x00E9;mantique est la troisi&amp;#x00E8;me phase, qui consiste &amp;#x00E0; v&amp;#x00E9;rifier que le code source a du sens et qu&amp;#x2019;il n&amp;#x2019;y a pas d&amp;#x2019;erreurs logiques. Elle produit une structure arborescente annot&amp;#x00E9;e (ou arbre syntaxique abstrait) qui repr&amp;#x00E9;sente la signification des tokens. La g&amp;#x00E9;n&amp;#x00E9;ration de code est la derni&amp;#x00E8;re phase, qui consiste &amp;#x00E0; produire le code machine correspondant au code source.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>L&amp;#x2019;analyse syntaxique</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>L&amp;#x2019;analyse s&amp;#x00E9;mantique</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>La g&amp;#x00E9;n&amp;#x00E9;ration de code</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quelle est la phase de la compilation qui produit un arbre syntaxique abstrait, qui repr&amp;#x00E9;sente la signification des tokens du code source ? </question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>L&amp;#x2019;analyse lexicale</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>L&amp;#x2019;analyse syntaxique</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>L&amp;#x2019;analyse s&amp;#x00E9;mantique</text><feedback>Cette question permet de v&amp;#x00E9;rifier si vous connaissez les produits interm&amp;#x00E9;diaires de la compilation. L&amp;#x2019;analyse s&amp;#x00E9;mantique produit un arbre syntaxique abstrait, qui repr&amp;#x00E9;sente la signification des tokens du code source. Par exemple, elle peut annoter les tokens avec leurs types, leurs valeurs, leurs port&amp;#x00E9;es, etc. Elle peut aussi d&amp;#x00E9;tecter et signaler les erreurs logiques, comme les variables non d&amp;#x00E9;clar&amp;#x00E9;es, les types incompatibles, les appels de fonctions incorrects, etc. L&amp;#x2019;analyse lexicale produit une s&amp;#x00E9;quence de tokens, qui repr&amp;#x00E9;sente les unit&amp;#x00E9;s lexicales du code source. L&amp;#x2019;analyse syntaxique produit un arbre syntaxique, qui repr&amp;#x00E9;sente la hi&amp;#x00E9;rarchie des tokens du code source. La g&amp;#x00E9;n&amp;#x00E9;ration de code produit le code machine, qui repr&amp;#x00E9;sente le programme ex&amp;#x00E9;cutable.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>La g&amp;#x00E9;n&amp;#x00E9;ration de code</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quelle est la phase de la compilation qui transforme l&amp;#x2019;arbre syntaxique abstrait en code machine ? </question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>L&amp;#x2019;analyse lexicale</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>L&amp;#x2019;analyse syntaxique</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>L&amp;#x2019;analyse s&amp;#x00E9;mantique</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>La g&amp;#x00E9;n&amp;#x00E9;ration de code</text><feedback>Cette question permet de v&amp;#x00E9;rifier si vous connaissez le r&amp;#x00E9;sultat final de la compilation. La g&amp;#x00E9;n&amp;#x00E9;ration de code est la phase qui transforme l&amp;#x2019;arbre syntaxique abstrait en code machine, qui peut &amp;#x00EA;tre ex&amp;#x00E9;cut&amp;#x00E9; par le processeur. Elle peut aussi effectuer des optimisations pour am&amp;#x00E9;liorer la performance ou l&amp;#x2019;efficacit&amp;#x00E9; du programme g&amp;#x00E9;n&amp;#x00E9;r&amp;#x00E9;. L&amp;#x2019;analyse lexicale, l&amp;#x2019;analyse syntaxique et l&amp;#x2019;analyse s&amp;#x00E9;mantique sont des phases pr&amp;#x00E9;liminaires qui ne produisent pas de code machine.</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record><question-record><question>Quel est le nom du fichier qui contient le code machine produit par la compilation ?</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type><answers><answer><text>Le fichier source</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Le fichier objet</text><feedback>Cette question permet de v&amp;#x00E9;rifier si vous connaissez les diff&amp;#x00E9;rents types de fichiers impliqu&amp;#x00E9;s dans la compilation. Le fichier objet est le fichier qui contient le code machine produit par la compilation d&amp;#x2019;un fichier source. Il n&amp;#x2019;est pas directement ex&amp;#x00E9;cutable, mais il peut &amp;#x00EA;tre li&amp;#x00E9; avec d&amp;#x2019;autres fichiers objets ou des biblioth&amp;#x00E8;ques pour former un fichier ex&amp;#x00E9;cutable. Le fichier source est le fichier qui contient le code</feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Le fichier ex&amp;#x00E9;cutable</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer><answer><text>Le fichier binaire</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options></answer></answers></question-record></questions>
</data>

<hotpot-config-file>
<jquiz>
<exercise-subtitle>Quiz</exercise-subtitle>
<instructions></instructions>
<guess-correct>Correct!</guess-correct>
<guess-incorrect>Sorry! Try again.</guess-incorrect>
<partly-incorrect>Your answer is partly wrong: </partly-incorrect>
<enter-a-guess>Please enter a guess.</enter-a-guess>
<next-correct-letter>Next correct letter in the answer: </next-correct-letter>
<correct-answers>Correct answers: </correct-answers>
<show-answer-caption>Show answer</show-answer-caption>
<include-hint>1</include-hint>
<include-show-answer>1</include-show-answer>
<next-ex-url>nextpage.htm</next-ex-url>
<send-email>0</send-email>
<continuous-scoring>1</continuous-scoring>
<show-correct-first-time>1</show-correct-first-time>
<shuffle-questions>1</shuffle-questions>
<shuffle-answers>1</shuffle-answers>
<show-limited-questions>0</show-limited-questions>
<questions-to-show>2</questions-to-show>
<short-answer-tries-on-hybrid-q>2</short-answer-tries-on-hybrid-q>
<separate-javascript-file>0</separate-javascript-file>
<case-sensitive>0</case-sensitive>
<include-keypad>0</include-keypad>
</jquiz>

<global>
<your-score-is>Your score is </your-score-is>
<correct-indicator>&amp;#x2714;</correct-indicator>
<incorrect-indicator>&amp;#x2718;</incorrect-indicator>
<correct-first-time>Questions answered correctly first time: </correct-first-time>
<completed-so-far>Questions completed so far: </completed-so-far>
<exercise-completed>You have completed the exercise.</exercise-completed>
<keypad-characters></keypad-characters>
<times-up>Your time is over!</times-up>
<next-ex-caption>=&amp;#x003E;</next-ex-caption>
<back-caption>&amp;#x003C;=</back-caption>
<contents-caption>Index</contents-caption>
<include-next-ex>1</include-next-ex>
<include-contents>1</include-contents>
<include-back>1</include-back>
<contents-url>contents.htm</contents-url>
<graphic-url></graphic-url>
<font-face>Arial,&quot;Comic Sans MS&quot;,Geneva,sans-serif</font-face>
<font-size>medium</font-size>
<page-bg-color>#C0C0C0</page-bg-color>
<title-color>#000000</title-color>
<ex-bg-color>#FFFFFF</ex-bg-color>
<text-color>#000000</text-color>
<link-color>#0000FF</link-color>
<vlink-color>#0000CC</vlink-color>
<nav-bar-color>#000000</nav-bar-color>
<formmail-url>http://yourserver.com/cgi-bin/FormMail.pl</formmail-url>
<email>you@yourserver.com</email>
<name-please>Please enter your name:</name-please>
<user-string-1>one</user-string-1>
<user-string-2>two</user-string-2>
<user-string-3>three</user-string-3>
<header-code></header-code>
<correct-first-time>Questions answered correctly first time: </correct-first-time>
<check-caption>Check</check-caption>
<ok-caption>OK</ok-caption>
<next-q-caption>=&amp;#x003E;</next-q-caption>
<last-q-caption>&amp;#x003C;=</last-q-caption>
<hint-caption>Hint</hint-caption>
<show-all-questions-caption>Show all questions</show-all-questions-caption>
<show-one-by-one-caption>Show questions one by one</show-one-by-one-caption>
<show-also-correct>1</show-also-correct>
<process-for-rtl>0</process-for-rtl>
<include-scorm-12>0</include-scorm-12>
</global>
</hotpot-config-file>
</hotpot-jquiz-file>
