<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en" prefix="dc: http://purl.org/dc/elements/1.1/">
<head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to YB SOW."/><meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"/>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>

<meta name="dc:creator" content="YB SOW" />
<meta name="dc:title" content="R&#x00E9;sum&#x00E9; Th&#x00E9;orique - Chap 2 Architecture client / serveur" />



<title>
R&#x00E9;sum&#x00E9; Th&#x00E9;orique - Chap 2 Architecture client / serveur
</title>

<!-- Made with executable version 7.0 Release 3 Build 0 -->

<!-- The following insertion allows you to add your own code directly to this head tag from the configuration screen -->



<style>


/* This is the CSS stylesheet used in the exercise. */
/* Elements in square brackets are replaced by data based on configuration settings when the exercise is built. */

/* BeginCorePageCSS */

/* Made with executable version 7.0 Release 3 Build 0 */



/* CSS variables for colours. */
:root{
	--strFontFace:       Arial,"Comic Sans MS",Geneva,sans-serif;
	--strFontSize:       medium;
	--strTextColor:      #000000;
	--strTitleColor:     #000000;

	--strFuncLightColor: #ffffff;
	--strFuncShadeColor: #7f7f7f;
	--strLinkColor:      #0000FF;
	--strVLinkColor:     #0000CC;
	
	--strNavBarColor:    #000000;
	--strNavLightColor:  #7f7f7f;
	--strNavShadeColor:  #000000;
	--strNavTextColor:   #ffffff;
	
	--strPageBGColor:    #C0C0C0;
	--strExBGColor:      #FFFFFF;
}

body{
	font-family: var(--strFontFace);
	background-color: var(--strPageBGColor);
	color: var(--strTextColor);
 
	margin-right: 5%;
	margin-left: 5%;
	font-size: var(--strFontSize);
	padding-bottom: 0.5em;
}

p{
	text-align: left;
	margin: 0px;
	font-size: 1em;
}

table,div,span,td{
	font-size: 1em;
	color: var(--strTextColor);
}

div.Titles{
	padding: 0.5em;;
	text-align: center;
	color: var(--strTitleColor);
}

button{
	font-family: var(--strFontFace);
	font-size: 1em;
	display: inline;
}

.ExerciseTitle{
	font-size: 140%;
	color: var(--strTitleColor);
}

.ExerciseSubtitle{
	font-size: 120%;
	color: var(--strTitleColor);
}

div.StdDiv, div.ExerciseContainer, div.ReadingContainer{
	background-color: var(--strExBGColor);
	text-align: center;
	font-size: 1em;
	color: var(--strTextColor);
	padding: 0.5em;
	border-style: solid;
	border-width: 1px 1px 1px 1px;
	border-color: var(--strTextColor);
	margin-bottom: 1px;
}

div.ReadingContainer, div.ExerciseContainer{
	min-width: 15em;
	flex-grow: 1;
	flex-basis: 0;
	margin: 1px;
}

div#ContainerDiv{
	margin: -1px;
	padding: 0;
	border: none;
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	justify-content: space-between;
}

/* EndCorePageCSS */

.RTLText{
	text-align: right;
	font-size: 150%;
	direction: rtl;
	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--strFontFace); 
}

.CentredRTLText{
	text-align: center;
	font-size: 150%;
	direction: rtl;
	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--strFontFace); 
}

button p.RTLText{
	text-align: center;
}

.RTLGapBox{
	text-align: right;
	font-size: 150%;
	direction: rtl;
	font-family: "Times New Roman", var(--strFontFace);
}

.Guess{
	font-weight: bold;
}

.CorrectAnswer{
	font-weight: bold;
}

div#Timer{
	padding: 0.25em;
	margin-left: auto;
	margin-right: auto;
	text-align: center;
	color: var(--strTitleColor);
}

span#TimerText{
	padding: 0.25em;
	border-width: 1px;
	border-style: solid;
	font-weight: bold;
	display: none;
	color: var(--strTitleColor);
}

span.Instructions{

}

div.ExerciseText{

}

.FeedbackText, .FeedbackText span.CorrectAnswer, .FeedbackText span.Guess, .FeedbackText span.Answer{
	color: var(--strTitleColor);
}

.LeftItem{
	font-size: 1em;
	color: var(--strTextColor);
	text-align: left;
}

.RightItem{
	font-weight: bold;
	font-size: 1em;
	color: var(--strTextColor);
	text-align: left;
}

span.CorrectMark{

}

input, textarea{
	font-family: var(--strFontFace);
	font-size: 120%;
}

select{
	font-size: 1em;
}

div.Feedback {
	background-color: var(--strPageBGColor);
	left: 33%;
	width: 34%;
	top: 33%;
	z-index: 1;
	border-style: solid;
	border-width: 1px;
	padding: 5px;
	text-align: center;
	color: var(--strTitleColor);
	position: absolute;
	display: none;
	font-size: 1em;
}




div.ExerciseDiv{
	color: var(--strTextColor);
}

/* JMatch standard output table. */
table.MatchTable{
	margin: 2em auto; 
	border-width: 0;
}

/* JMatch flashcard styles */
table.FlashcardTable{
	background-color: transparent;
	color: var(--strTextColor);
	border-color: var(--strTextColor);
	margin-left: auto;
	margin-right: auto;
	margin-top: 2em;
	margin-bottom: 2em;
	/*width: 90%;*/
	position: relative;
	text-align: center;
	padding: 0px;
}

table.FlashcardTable tr{
	border-style: none;
	margin: 0px;
	padding: 0px;
	background-color: var(--strExBGColor);
}

table.FlashcardTable td.Showing{
	font-size: 140%;
	text-align: center;
	width: 50%;
	display: table-cell;
	padding: 2em;
	margin: 0px;
	border-style: solid;
	border-width: 1px;
	border-radius: 0.5em;
	color: var(--strTextColor);
	box-shadow: 0.2em 0.3em 0.2em var(--strNavShadeColor);
	background-color: var(--strPageBGColor);
}

table.FlashcardTable td.Hidden{
	display: none;
}

/* JMix styles */
div.JMixDrag, div.JMatchDrag{
	padding: 0;
	background-color: var(--strPageBGColor);
	border-style: none;
}

div#GuessDiv{
	padding: 0.5em;
	margin-bottom: 2em;
}

div#SegmentDiv{
	margin-top: 2em;
	margin-bottom: 2em;
	text-align: center;
}

a.ExSegment{
	font-size: 120%;
	font-weight: bold;
	text-decoration: none;
	color: var(--strTextColor);
	display: inline-block;
	padding: 0.5em;
	border: solid 1pt gray;
	margin-bottom: 0.5em;
}

span.RemainingWordList{
	font-style: italic;
}

div.DropLine {
	position: absolute;
	text-align: left;
	border-bottom-style: solid;
	border-bottom-width: 1px;
	border-bottom-color: var(--strTitleColor);
	width: 80%;
	left: 10%;
}

/* JCloze styles */

.ClozeWordList{
	text-align: center;
	font-weight: bold;
}

div.ClozeBody{
	text-align: left;
	margin-top: 2em;
	margin-bottom: 2em;
	line-height: 2.0
}

span.GapSpan{
	font-weight: bold;
}

/* JCross styles */

table.CrosswordGrid{
	margin: auto auto 1em auto;
	border-collapse: collapse;
	padding: 0px;
	background-color: #000000;
}

table.CrosswordGrid tbody tr td{
	width: 1.5em;
	height: 1.5em;
	text-align: center;
	vertical-align: middle;
	font-size: 140%;
	padding: 1px;
	margin: 0px;
	border-style: solid;
	border-width: 1px;
	border-color: #000000;
	color: #000000;
}

table.CrosswordGrid span{
	color: #000000;
}

table.CrosswordGrid td.BlankCell{
	background-color: #000000;
	color: #000000;
}

table.CrosswordGrid td.LetterOnlyCell{
	text-align: center;
	vertical-align: middle;
	background-color: #ffffff;
	color: #000000;
	font-weight: bold;
}

table.CrosswordGrid td.NumLetterCell{
	text-align: left;
	vertical-align: top;
	background-color: #ffffff;
	color: #000000;
	padding: 1px;
	font-weight: bold;
}

.NumLetterCellText{
	cursor: pointer;
	color: #000000;
}

.GridNum{
	vertical-align: super;
	font-size: 66%;
	font-weight: bold;
	text-decoration: none;
	color: #000000;
}

.GridNum:hover, .GridNum:visited{
	color: #000000;
}

table#Clues{
	margin: auto;
	vertical-align: top;
}

table#Clues td{
	vertical-align: top;
}

table.ClueList{
  margin: auto;
}

td.ClueNum{
	text-align: right;
	font-weight: bold;
	vertical-align: top;
}

td.Clue{
	text-align: left;
}

div#ClueEntry{
	text-align: left;
	margin-bottom: 1em;
}

/* Keypad styles */

div.Keypad{
	text-align: center;
	display: none; /* initially hidden, shown if needed */
	margin-bottom: 0.5em;
}

div.Keypad button{
	font-family: var(--strFontFace);
	font-size: 120%;
	background-color: #ffffff;
	color: #000000;
	width: 2em;
	border-style: solid;
	border-width: 1px;
	border-radius: 0.5em;
	color: var(--strTextColor);
	box-shadow: 0.2em 0.3em 0.2em var(--strTextColor);
}

/* JQuiz styles */

div.QuestionNavigation{
	text-align: center;
}

.QNum{
	margin: 0em 1em 0.5em 1em;
	font-weight: bold;
	vertical-align: middle;
}

textarea{
	font-family: var(--strFontFace);
}

.QuestionText{
	text-align: left;
	margin: 0px;
	font-size: 1em;
}

.Answer{
	font-size: 120%;
}

.PartialAnswer{
	font-size: 120%;
	letter-spacing: 0.1em;
	color: var(--strTitleColor);
}

.Highlight{
	color: #000000;
	background-color: #ffff00;
	font-weight: bold;
	font-size: 120%;
}

ol.QuizQuestions{
	text-align: left;
	list-style-type: none;
}

li.QuizQuestion{
	padding: 1em;
	border-style: solid;
	border-width: 0px 0px 1px 0px;
}

ol.MCAnswers{
	text-align: left;
	list-style-type: upper-alpha;
	padding: 1em;
}

ol.MCAnswers li{
	margin-bottom: 1em;
}

ol.MSelAnswers{
	text-align: left;
	list-style-type: lower-alpha;
	padding: 1em;
}

div.ShortAnswer{
	padding: 1em;
}

.FuncButton {
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 3em;

	border-left-color: var(--strFuncLightColor);
	border-top-color: var(--strFuncLightColor);
	border-right-color: var(--strFuncShadeColor);
	border-bottom-color: var(--strFuncShadeColor);
	color: var(--strTextColor);
	background-color: var(--strExBGColor);

	border-width: 1pt;
	cursor: pointer;	
	box-shadow: 0.2em 0.3em 0.2em var(--strFuncShadeColor);
}

.FuncButton:active {
	box-shadow: none;
}

.FuncButton:hover{
	color: var(--strExBGColor);
	background-color: var(--strTextColor);
}

/*BeginNavBarStyle*/

div.NavButtonBar{
	background-color: var(--strNavBarColor);
	text-align: center;
	margin: 0.25rem 0;
	clear: both;
	font-size: 1em;
	padding: 0.2em;
	box-sizing: border-box;
}

.NavButton {
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 3em;
	
	border-left-color: var(--strNavLightColor);
	border-top-color: var(--strNavLightColor);
	border-right-color: var(--strNavShadeColor);
	border-bottom-color: var(--strNavShadeColor); 
	background-color: var(--strNavBarColor);
	color: var(--strNavTextColor);

	border-width: 1pt;
	cursor: pointer;	
	box-shadow: 0.2em 0.3em 0.2em var(--strNavShadeColor);
}

.NavButton:active {
	box-shadow: none;
}

.NavButton:hover{
	color: var(--strNavBarColor);
	background-color: var(--strNavTextColor);
}

/*EndNavBarStyle*/

a{
	color: var(--strLinkColor);
}

a:visited{
	color: var(--strVLinkColor);
}

a:hover{
	color: var(--strLinkColor);
}

div.CardStyle {
	position: absolute;
	font-family: var(--strFontFace);
	font-size: 1em;
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 2em;
	border-width: 1pt;
	color: var(--strTextColor);
	box-shadow: 0.2em 0.3em 0.2em var(--strTextColor);
	background-color: var(--strExBGColor);
	left: -50px;
	top: -50px;
	overflow: visible;
	touch-action: none;
	user-select: none;
	box-sizing: border-box;
}

div.CardStyleCentered{
	text-align: center;
}

.rtl{
	text-align: right;
	font-size: 140%;
}


</style>

<script>

//<![CDATA[

<!--




//CODE FOR HANDLING NAV BUTTONS AND FUNCTION BUTTONS

function FocusAButton(){
	if (document.getElementById('CheckButton1') != null){
		document.getElementById('CheckButton1').focus();
	}
	else{
		if (document.getElementById('CheckButton2') != null){
			document.getElementById('CheckButton2').focus();
		}
		else{
			document.getElementsByTagName('button')[0].focus();
		}
	}
}




//CODE FOR HANDLING DISPLAY OF POPUP FEEDBACK BOX

var topZ = 1000;

function ShowMessage(Feedback){
	var Output = Feedback + '<br /><br />';
	document.getElementById('FeedbackContent').innerHTML = Output;
	var FDiv = document.getElementById('FeedbackDiv');
	topZ++;
	FDiv.style.zIndex = topZ;
	FDiv.style.top = TopSettingWithScrollOffset(30) + 'px';

	FDiv.style.display = 'block';

	ShowElements(false, 'input');
	ShowElements(false, 'select');
	ShowElements(false, 'object');
	ShowElements(true, 'object', 'FeedbackContent');

//Focus the OK button
	setTimeout("document.getElementById('FeedbackOKButton').focus()", 50);
	
//
}

function ShowElements(Show, TagName, ContainerToReverse){
// added third argument to allow objects in the feedback box to appear
//IE bug -- hide all the form elements that will show through the popup
//FF on Mac bug : doesn't redisplay objects whose visibility is set to visible
//unless the object's display property is changed

	//get container object (by Id passed in, or use document otherwise)
	TopNode = document.getElementById(ContainerToReverse);
	var Els;
	if (TopNode != null) {
		Els = TopNode.getElementsByTagName(TagName);
	} else {
		Els = document.getElementsByTagName(TagName);
	}

	for (var i=0; i<Els.length; i++){
		if (TagName == "object") {
			//manipulate object elements in all browsers
			if (Show == true){
				Els[i].style.visibility = 'visible';
			}
			else{
				Els[i].style.visibility = 'hidden';
			}
		} 
	}
}



function HideFeedback(){
	document.getElementById('FeedbackDiv').style.display = 'none';
	ShowElements(true, 'input');
	ShowElements(true, 'select');
	ShowElements(true, 'object');
}


//GENERAL UTILITY FUNCTIONS AND VARIABLES

//PAGE DIMENSION FUNCTIONS
function PageDim(){
//Get the page width and height
	this.W = 600;
	this.H = 400;
	this.W = document.getElementsByTagName('body')[0].offsetWidth;
	this.H = document.getElementsByTagName('body')[0].offsetHeight;
}

var pg = null;

function GetPageXY(El) {
	var XY = {x: 0, y: 0};
	while(El){
		XY.x += El.offsetLeft;
		XY.y += El.offsetTop;
		El = El.offsetParent;
	}
	return XY;
}

function GetScrollTop(){
	if (typeof(window.pageYOffset) == 'number'){
		return window.pageYOffset;
	}
	else{
		if ((document.body)&&(document.body.scrollTop)){
			return document.body.scrollTop;
		}
		else{
			if ((document.documentElement)&&(document.documentElement.scrollTop)){
				return document.documentElement.scrollTop;
			}
			else{
				return 0;
			}
		}
	}
}

function GetViewportHeight(){
	if (typeof window.innerHeight != 'undefined'){
		return window.innerHeight;
	}
	else{
		if (((typeof document.documentElement != 'undefined')&&(typeof document.documentElement.clientHeight !=
     'undefined'))&&(document.documentElement.clientHeight != 0)){
			return document.documentElement.clientHeight;
		}
		else{
			return document.getElementsByTagName('body')[0].clientHeight;
		}
	}
}

function TopSettingWithScrollOffset(TopPercent){
	var T = Math.floor(GetViewportHeight() * (TopPercent/100));
	return GetScrollTop() + T; 
}

//CODE FOR AVOIDING LOSS OF DATA WHEN BACKSPACE KEY INVOKES history.back()
var InTextBox = false;

function SuppressBackspace(e){ 
	if (InTextBox == true){return;}
	thisKey = e.keyCode;

	var Suppress = false;

	if (thisKey == 8) {
		Suppress = true;
		e.preventDefault();
	}
}

window.addEventListener('keypress',SuppressBackspace,false);

function ReduceItems(InArray, ReduceToSize){
	var ItemToDump=0;
	var j=0;
	while (InArray.length > ReduceToSize){
		ItemToDump = Math.floor(InArray.length*Math.random());
		InArray.splice(ItemToDump, 1);
	}
}

function Shuffle(InArray){
	var Num;
	var Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < (j-1); k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteToInstructions(Feedback) {
	document.getElementById('InstructionsDiv').innerHTML = Feedback;

}




function EscapeDoubleQuotes(InString){
	return InString.replace(/"/g, '&quot;')
}

function TrimString(InString){
        var x = 0;

        if (InString.length != 0) {
                while ((InString.charAt(InString.length - 1) == '\u0020') || (InString.charAt(InString.length - 1) == '\u000A') || (InString.charAt(InString.length - 1) == '\u000D')){
                        InString = InString.substring(0, InString.length - 1)
                }

                while ((InString.charAt(0) == '\u0020') || (InString.charAt(0) == '\u000A') || (InString.charAt(0) == '\u000D')){
                        InString = InString.substring(1, InString.length)
                }

                while (InString.indexOf('  ') != -1) {
                        x = InString.indexOf('  ')
                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length)
                 }

                return InString;
        }

        else {
                return '';
        }
}

function FindLongest(InArray){
	if (InArray.length < 1){return -1;}

	var Longest = 0;
	for (var i=1; i<InArray.length; i++){
		if (InArray[i].length > InArray[Longest].length){
			Longest = i;
		}
	}
	return Longest;
}

//SELECTION OBJECT FOR TYPING WITH KEYPAD
var selObj = null;
            
SelObj = function(box){
	this.box = box;
	this.selStart = this.box.selectionStart;
	this.selEnd = this.box.selectionEnd;
	this.selText = this.box.value.substring(this.selStart, this.selEnd);
	return this;
}

function setSelText(newText){
	var caretPos = this.selStart + newText.length;
	var newValue = this.box.value.substring(0, this.selStart);
	newValue += newText;
	newValue += this.box.value.substring(this.selEnd, this.box.value.length);
	this.box.value = newValue;
	this.box.setSelectionRange(caretPos, caretPos);
	this.box.focus();
}
SelObj.prototype.setSelText = setSelText;

function setSelSelectionRange(start, end){
	this.box.setSelectionRange(start, end);
}
SelObj.prototype.setSelSelectionRange = setSelSelectionRange;

//UNICODE CHARACTER FUNCTIONS
function IsCombiningDiacritic(CharNum){
	var Result = (((CharNum >= 0x0300)&&(CharNum <= 0x370))||((CharNum >= 0x20d0)&&(CharNum <= 0x20ff)));
	Result = Result || (((CharNum >= 0x3099)&&(CharNum <= 0x309a))||((CharNum >= 0xfe20)&&(CharNum <= 0xfe23)));
	return Result;
}

function IsCJK(CharNum){
	return ((CharNum >= 0x3000)&&(CharNum < 0xd800));
}

//SETUP FUNCTIONS
//BROWSER WILL REFILL TEXT BOXES FROM CACHE IF NOT PREVENTED
function ClearTextBoxes(){
	var NList = document.getElementsByTagName('input');
	for (var i=0; i<NList.length; i++){
		if ((NList[i].id.indexOf('Guess') > -1)||(NList[i].id.indexOf('Gap') > -1)){
			NList[i].value = '';
		}
		if (NList[i].id.indexOf('Chk') > -1){
			NList[i].checked = '';
		}
	}
}







//JQUIZ CORE JAVASCRIPT CODE

var CurrQNum = 0;
var CorrectIndicator = '&#x2714;';
var IncorrectIndicator = '&#x2718;';
var YourScoreIs = 'Your score is ';

//New for 6.2.2.0
var CompletedSoFar = 'Questions completed so far: ';
var ExerciseCompleted = 'You have completed the exercise.';
var ShowCompletedSoFar = true;

var ContinuousScoring = true;
var CorrectFirstTime = 'Questions answered correctly first time: ';
var ShowCorrectFirstTime = true;
var ShuffleQs = true;
var ShuffleAs = true;
var DefaultRight = 'Correct!';
var DefaultWrong = 'Sorry! Try again.';
var QsToShow = 11;
var Score = 0;
var Finished = false;
var Qs = null;
var QArray = new Array();
var ShowingAllQuestions = false;
var ShowAllQuestionsCaption = 'Show all questions';
var ShowOneByOneCaption = 'Show questions one by one';
var State = new Array();
var Feedback = '';
var TimeOver = false;
var strInstructions = '';
var Locked = false;

//The following variable can be used to add a message explaining that
//the question is finished, so no further marking will take place.
var strQuestionFinished = '';

function CompleteEmptyFeedback(){
	var QNum, ANum;
	for (QNum=0; QNum<I.length; QNum++){
//Only do this if not multi-select
		if (I[QNum][2] != '3'){
  		for (ANum = 0; ANum<I[QNum][3].length; ANum++){
  			if (I[QNum][3][ANum][1].length < 1){
  				if (I[QNum][3][ANum][2] > 0){
  					I[QNum][3][ANum][1] = DefaultRight;
  				}
  				else{
  					I[QNum][3][ANum][1] = DefaultWrong;
  				}
  			}
  		}
		}
	}
}

function SetUpQuestions(){
	var AList = new Array(); 
	var QList = new Array();
	var i, j;
	Qs = document.getElementById('Questions');
	while (Qs.getElementsByTagName('li').length > 0){
		QList.push(Qs.removeChild(Qs.getElementsByTagName('li')[0]));
	}
	var DumpItem = 0;
	if (QsToShow > QList.length){
		QsToShow = QList.length;
	}
	while (QsToShow < QList.length){
		DumpItem = Math.floor(QList.length*Math.random());
		for (j=DumpItem; j<(QList.length-1); j++){
			QList[j] = QList[j+1];
		}
		QList.length = QList.length-1;
	}
	if (ShuffleQs == true){
		QList = Shuffle(QList);
	}
	if (ShuffleAs == true){
		var As;
		for (var i=0; i<QList.length; i++){
			As = QList[i].getElementsByTagName('ol')[0];
			if (As != null){
  			AList.length = 0;
				while (As.getElementsByTagName('li').length > 0){
					AList.push(As.removeChild(As.getElementsByTagName('li')[0]));
				}
				AList = Shuffle(AList);
				for (j=0; j<AList.length; j++){
					As.appendChild(AList[j]);
				}
			}
		}
	}
	
	for (i=0; i<QList.length; i++){
		Qs.appendChild(QList[i]);
		QArray[QArray.length] = QList[i];
	}

//Show the first item
	QArray[0].style.display = '';
	
//Now hide all except the first item
	for (i=1; i<QArray.length; i++){
		QArray[i].style.display = 'none';
	}		
	SetQNumReadout();
	
	SetFocusToTextbox();
}

function SetFocusToTextbox(){
//if there's a textbox, set the focus in it
	if (QArray[CurrQNum].getElementsByTagName('input')[0] != null){
		QArray[CurrQNum].getElementsByTagName('input')[0].focus();
//and show a keypad if there is one
		if (document.getElementById('CharacterKeypad') != null){
			document.getElementById('CharacterKeypad').style.display = 'block';
		}
	}
	else{
  	if (QArray[CurrQNum].getElementsByTagName('textarea')[0] != null){
  		QArray[CurrQNum].getElementsByTagName('textarea')[0].focus();	
//and show a keypad if there is one
			if (document.getElementById('CharacterKeypad') != null){
				document.getElementById('CharacterKeypad').style.display = 'block';
			}
		}
//This added for 6.0.4.11: hide accented character buttons if no textbox
		else{
			if (document.getElementById('CharacterKeypad') != null){
				document.getElementById('CharacterKeypad').style.display = 'none';
			}
		}
	}
}

function ChangeQ(ChangeBy){
//The following line prevents moving to another question until the current
//question is answered correctly. Uncomment it to enable this behaviour. 
//	if (State[CurrQNum][0] == -1){return;}
	if (((CurrQNum + ChangeBy) < 0)||((CurrQNum + ChangeBy) >= QArray.length)){return;}
	QArray[CurrQNum].style.display = 'none';
	CurrQNum += ChangeBy;
	QArray[CurrQNum].style.display = '';
//Undocumented function added 10/12/2004
	ShowSpecialReadingForQuestion();
	SetQNumReadout();
	SetFocusToTextbox();
}

var HiddenReadingShown = false;
function ShowSpecialReadingForQuestion(){
//Undocumented function for showing specific reading text elements which change with each question
//Added on 10/12/2004
	if (document.getElementById('ReadingDiv') != null){
		if (HiddenReadingShown == true){
			document.getElementById('ReadingDiv').innerHTML = '';
		}
		if (QArray[CurrQNum] != null){
//Fix for 6.0.4.25
			var Children = QArray[CurrQNum].getElementsByTagName('div');
			for (var i=0; i<Children.length; i++){
			if (Children[i].className=="HiddenReading"){
					document.getElementById('ReadingDiv').innerHTML = Children[i].innerHTML;
					HiddenReadingShown = true;
//Hide the ShowAllQuestions button to avoid confusion
					if (document.getElementById('ShowMethodButton') != null){
						document.getElementById('ShowMethodButton').style.display = 'none';
					}
				}
			}	
		}
	}
}

function SetQNumReadout(){
	document.getElementById('QNumReadout').innerHTML = (CurrQNum+1) + ' / ' + QArray.length;
	if ((CurrQNum+1) >= QArray.length){
		if (document.getElementById('NextQButton') != null){
			document.getElementById('NextQButton').style.visibility = 'hidden';
		}
	}
	else{
		if (document.getElementById('NextQButton') != null){
			document.getElementById('NextQButton').style.visibility = 'visible';
		}
	}
	if (CurrQNum <= 0){
		if (document.getElementById('PrevQButton') != null){
			document.getElementById('PrevQButton').style.visibility = 'hidden';
		}
	}
	else{
		if (document.getElementById('PrevQButton') != null){
			document.getElementById('PrevQButton').style.visibility = 'visible';
		}
	}
}

var I=new Array();
I[0]=new Array();I[0][0]=100;
I[0][1]='';
I[0][2]='0';
I[0][3]=new Array();
I[0][3][0]=new Array('Une structure d\u2019application distribu\u00E9e qui r\u00E9partit les t\u00E2ches entre les fournisseurs d\u2019un service, appel\u00E9s serveurs, et les demandeurs du service, appel\u00E9s clients.','L\u2019architecture client/serveur est bas\u00E9e sur le principe de la distribution des t\u00E2ches entre les entit\u00E9s qui fournissent un service (les serveurs) et celles qui le demandent (les clients). Les autres propositions ne correspondent pas \u00E0 cette d\u00E9finition. Il faut \u00E9viter de confondre l\u2019architecture client/serveur avec d\u2019autres types d\u2019architecture comme l\u2019architecture centralis\u00E9e, l\u2019architecture modulaire ou l\u2019architecture parall\u00E8le.',1,100,1);
I[0][3][1]=new Array('Une structure d\u2019application centralis\u00E9e qui ex\u00E9cute toutes les t\u00E2ches sur un seul ordinateur, appel\u00E9 serveur, et qui communique avec les utilisateurs, appel\u00E9s clients.','',0,0,1);
I[0][3][2]=new Array('Une structure d\u2019application modulaire qui divise les t\u00E2ches en plusieurs composants ind\u00E9pendants, appel\u00E9s clients, et qui interagissent avec un syst\u00E8me de gestion, appel\u00E9 serveur.','',0,0,1);
I[0][3][3]=new Array(') Une structure d\u2019application parall\u00E8le qui ex\u00E9cute les m\u00EAmes t\u00E2ches sur plusieurs ordinateurs, appel\u00E9s clients, et qui se synchronisent avec un contr\u00F4leur, appel\u00E9 serveur.','',0,0,1);
I[1]=new Array();I[1][0]=100;
I[1][1]='';
I[1][2]='0';
I[1][3]=new Array();
I[1][3][0]=new Array('Il permet au client de se connecter au serveur gr\u00E2ce \u00E0 son adresse et \u00E0 son port.','',0,0,1);
I[1][3][1]=new Array('Il permet au serveur de renvoyer au client des donn\u00E9es sous forme de fichiers HTML, CSS ou JavaScript.','',0,0,1);
I[1][3][2]=new Array('Il permet au client d\u2019envoyer au serveur une requ\u00EAte sp\u00E9cifiant l\u2019action et la ressource souhait\u00E9es.','',0,0,1);
I[1][3][3]=new Array('Il permet au client et au serveur de communiquer selon un format standardis\u00E9.','Le protocole HTTP (HyperText Transfer Protocol) est le protocole utilis\u00E9 par les navigateurs web et les serveurs web pour \u00E9changer des informations. Il d\u00E9finit le format des requ\u00EAtes et des r\u00E9ponses entre le client et le serveur. Les autres propositions sont des cons\u00E9quences ou des exemples de l\u2019utilisation du protocole HTTP, mais pas son r\u00F4le principal. Il faut \u00E9viter de confondre le protocole HTTP avec d\u2019autres \u00E9l\u00E9ments comme l\u2019adresse, le port ou les fichiers web.',1,100,1);
I[2]=new Array();I[2][0]=100;
I[2][1]='';
I[2][2]='0';
I[2][3]=new Array();
I[2][3][0]=new Array('GET','m\u00E9thodes ont des fonctions diff\u00E9rentes : POST cr\u00E9e une ressource, HEAD r\u00E9cup\u00E8re les m\u00E9tadonn\u00E9es d\u2019une ressource, PUT met \u00E0 jour ou cr\u00E9e une ressource. Il faut \u00E9viter de confondre les diff\u00E9rentes m\u00E9thodes HTTP et conna\u00EEtre leur signification.',1,100,1);
I[2][3][1]=new Array('POST','',0,0,1);
I[2][3][2]=new Array('HEAD','',0,0,1);
I[2][3][3]=new Array('PUT','',0,0,1);
I[3]=new Array();I[3][0]=100;
I[3][1]='';
I[3][2]='0';
I[3][3]=new Array();
I[3][3][0]=new Array('Un format binaire compos\u00E9 de bits et d\u2019octets.','',0,0,1);
I[3][3][1]=new Array('Un format texte compos\u00E9 de lignes et de caract\u00E8res.','Le protocole HTTP utilise un format texte pour les requ\u00EAtes et les r\u00E9ponses entre le client et le serveur. Ce format est facile \u00E0 lire et \u00E0 comprendre pour les humains et les machines. Les autres formats ne sont pas adapt\u00E9s pour le protocole HTTP. Il faut \u00E9viter de confondre le format des requ\u00EAtes et des r\u00E9ponses HTTP avec d\u2019autres formats utilis\u00E9s pour d\u2019autres types de donn\u00E9es.',1,100,1);
I[3][3][2]=new Array('Un format graphique compos\u00E9 d\u2019images et de couleurs.','',0,0,1);
I[3][3][3]=new Array('Un format audio compos\u00E9 de sons et de fr\u00E9quences.','',0,0,1);
I[4]=new Array();I[4][0]=100;
I[4][1]='';
I[4][2]='0';
I[4][3]=new Array();
I[4][3][0]=new Array('Il permet d\u2019identifier la machine physique qui h\u00E9berge le serveur.','',0,0,1);
I[4][3][1]=new Array('Il permet d\u2019identifier le service particulier auquel le client souhaite acc\u00E9der sur le serveur.','Le port est un nombre qui fait partie de l\u2019adresse du serveur. Il permet au client de sp\u00E9cifier le service qu\u2019il veut utiliser sur le serveur, par exemple le service web, le service mail ou le service FTP. Les autres \u00E9l\u00E9ments de l\u2019adresse du serveur ont des r\u00F4les diff\u00E9rents : l\u2019adresse IP ou le nom de domaine identifient la machine physique, le protocole est indiqu\u00E9 par le pr\u00E9fixe (http, https, ftp, etc.), et la ressource est sp\u00E9cifi\u00E9e par l\u2019URL. Il faut \u00E9viter de confondre le port avec d\u2019autres parties de l\u2019adresse du serveur.',1,100,1);
I[4][3][2]=new Array('Il permet d\u2019identifier le protocole utilis\u00E9 pour communiquer avec le serveur.','',0,0,1);
I[4][3][3]=new Array('Il permet d\u2019identifier la ressource sp\u00E9cifique que le client demande au serveur.','',0,0,1);
I[5]=new Array();I[5][0]=100;
I[5][1]='';
I[5][2]='0';
I[5][3]=new Array();
I[5][3][0]=new Array('Les requ\u00EAtes synchrones bloquent l\u2019ex\u00E9cution du code jusqu\u2019\u00E0 ce que la r\u00E9ponse soit re\u00E7ue, tandis que les requ\u00EAtes asynchrones permettent au code de continuer \u00E0 s\u2019ex\u00E9cuter pendant que la r\u00E9ponse est attendue.','Les requ\u00EAtes HTTP synchrones sont des requ\u00EAtes qui attendent la r\u00E9ponse du serveur avant de continuer l\u2019ex\u00E9cution du code. Elles peuvent ralentir l\u2019application si la r\u00E9ponse prend du temps \u00E0 arriver. Les requ\u00EAtes HTTP asynchrones sont des requ\u00EAtes qui ne bloquent pas l\u2019ex\u00E9cution du code et qui g\u00E8rent la r\u00E9ponse du serveur avec une fonction de rappel (callback). Elles permettent d\u2019am\u00E9liorer la performance et la r\u00E9activit\u00E9 de l\u2019application. Il faut \u00E9viter de confondre les requ\u00EAtes HTTP synchrones et asynchrones avec d\u2019autres concepts comme la simultan\u00E9it\u00E9, le multithreading ou la persistance de la connexion.',1,100,1);
I[5][3][1]=new Array('Les requ\u00EAtes synchrones envoient plusieurs requ\u00EAtes en m\u00EAme temps et re\u00E7oivent les r\u00E9ponses dans l\u2019ordre, tandis que les requ\u00EAtes asynchrones envoient une seule requ\u00EAte \u00E0 la fois et re\u00E7oivent la r\u00E9ponse imm\u00E9diatement.','',0,0,1);
I[5][3][2]=new Array('Les requ\u00EAtes synchrones utilisent un seul thread pour g\u00E9rer les requ\u00EAtes et les r\u00E9ponses, tandis que les requ\u00EAtes asynchrones utilisent plusieurs threads pour g\u00E9rer les requ\u00EAtes et les r\u00E9ponses.','',0,0,1);
I[5][3][3]=new Array('Les requ\u00EAtes synchrones n\u00E9cessitent une connexion persistante entre le client et le serveur, tandis que les requ\u00EAtes asynchrones peuvent utiliser une connexion intermittente entre le client et le serveur.','',0,0,1);
I[6]=new Array();I[6][0]=100;
I[6][1]='';
I[6][2]='0';
I[6][3]=new Array();
I[6][3][0]=new Array('Un serveur web statique ne peut pas modifier le contenu des fichiers qu\u2019il renvoie au client, tandis qu\u2019un serveur web dynamique peut modifier le contenu des fichiers en fonction de la requ\u00EAte du client ou d\u2019autres param\u00E8tres.','',0,0,1);
I[6][3][1]=new Array('Un serveur web statique ne peut pas utiliser de langages de programmation c\u00F4t\u00E9 serveur, tandis qu\u2019un serveur web dynamique peut utiliser des langages comme PHP, Python ou Ruby pour cr\u00E9er des fichiers \u00E0 la vol\u00E9e.','',0,0,1);
I[6][3][2]=new Array('Un serveur web statique ne peut pas se connecter \u00E0 une base de donn\u00E9es, tandis qu\u2019un serveur web dynamique peut se connecter \u00E0 une base de donn\u00E9es pour r\u00E9cup\u00E9rer ou stocker des informations.','',0,0,1);
I[6][3][3]=new Array('Toutes les r\u00E9ponses sont correctes.','Un serveur web statique est un serveur qui renvoie au client les fichiers tels qu\u2019ils sont stock\u00E9s sur le disque, sans les modifier ni les cr\u00E9er. Un serveur web dynamique est un serveur qui peut modifier ou cr\u00E9er des fichiers en fonction de la requ\u00EAte du client, de l\u2019heure, du nombre de visiteurs ou d\u2019autres param\u00E8tres. Pour cela, il utilise des langages de programmation c\u00F4t\u00E9 serveur et se connecte \u00E0 une base de donn\u00E9es. Il faut \u00E9viter de penser qu\u2019un serveur web statique ou dynamique est d\u00E9fini par le type de fichiers qu\u2019il utilise ou par le protocole qu\u2019il suit.',1,100,1);
I[7]=new Array();I[7][0]=100;
I[7][1]='';
I[7][2]='0';
I[7][3]=new Array();
I[7][3][0]=new Array('Un ordinateur qui stocke les fichiers qui composent un site web et qui les envoie aux navigateurs web des utilisateurs.','',0,0,1);
I[7][3][1]=new Array('Un ordinateur qui ex\u00E9cute un logiciel qui comprend les requ\u00EAtes HTTP des navigateurs web et qui leur renvoie des r\u00E9ponses.','',0,0,1);
I[7][3][2]=new Array('Un ordinateur qui se connecte \u00E0 Internet et qui est accessible via un nom de domaine ou une adresse IP.','',0,0,1);
I[7][3][3]=new Array('Toutes les r\u00E9ponses sont correctes.','Un serveur web au sens mat\u00E9riel est un ordinateur qui remplit les trois fonctions d\u00E9crites dans les propositions A, B et C. Il faut \u00E9viter de penser qu\u2019un serveur web est seulement un espace de stockage ou seulement un logiciel ou seulement une connexion r\u00E9seau.',1,100,1);
I[8]=new Array();I[8][0]=100;
I[8][1]='';
I[8][2]='0';
I[8][3]=new Array();
I[8][3][0]=new Array('Il permet de g\u00E9rer la communication entre le serveur web et les navigateurs web selon le protocole HTTP.','Le serveur HTTP est le logiciel qui traite les requ\u00EAtes et les r\u00E9ponses HTTP entre le serveur web et les navigateurs web. Il faut \u00E9viter de confondre le serveur HTTP avec d\u2019autres composants logiciels d\u2019un serveur web, comme le serveur d\u2019applications, le serveur de base de donn\u00E9es ou le serveur HTTPS.',1,100,1);
I[8][3][1]=new Array('Il permet de cr\u00E9er des pages web dynamiques en utilisant des langages de programmation c\u00F4t\u00E9 serveur.','',0,0,1);
I[8][3][2]=new Array('Il permet de se connecter \u00E0 une base de donn\u00E9es pour r\u00E9cup\u00E9rer ou stocker des informations.','',0,0,1);
I[8][3][3]=new Array('Il permet de s\u00E9curiser la transmission des donn\u00E9es entre le serveur web et les navigateurs web.','',0,0,1);
I[9]=new Array();I[9][0]=100;
I[9][1]='';
I[9][2]='0';
I[9][3]=new Array();
I[9][3][0]=new Array('Un site web statique est compos\u00E9 de fichiers HTML, CSS et JavaScript qui sont envoy\u00E9s tels quels au navigateur web, tandis qu\u2019un site web dynamique est compos\u00E9 de fichiers qui sont modifi\u00E9s ou g\u00E9n\u00E9r\u00E9s par le serveur web avant d\u2019\u00EAtre envoy\u00E9s au navigateur web.','',0,0,1);
I[9][3][1]=new Array('Un site web statique est compos\u00E9 de fichiers qui ne changent pas, tandis qu\u2019un site web dynamique est compos\u00E9 de fichiers qui changent en fonction du temps, du nombre de visiteurs ou d\u2019autres param\u00E8tres.','',0,0,1);
I[9][3][2]=new Array('Un site web statique est compos\u00E9 de fichiers qui ne n\u00E9cessitent pas de langages de programmation c\u00F4t\u00E9 serveur, tandis qu\u2019un site web dynamique est compos\u00E9 de fichiers qui n\u00E9cessitent des langages comme PHP, Python ou Ruby pour \u00EAtre cr\u00E9\u00E9s.','',0,0,1);
I[9][3][3]=new Array('Toutes les r\u00E9ponses sont correctes.','Un site web statique est un site web dont le contenu ne d\u00E9pend pas du serveur web, mais seulement des fichiers HTML, CSS et JavaScript qui sont stock\u00E9s sur le disque. Un site web dynamique est un site web dont le contenu d\u00E9pend du serveur web, qui peut modifier ou cr\u00E9er des fichiers en utilisant des langages de programmation c\u00F4t\u00E9 serveur et en se connectant \u00E0 une base de donn\u00E9es. Il faut \u00E9viter de penser qu\u2019un site web statique ou dynamique est d\u00E9fini par le type de fichiers qu\u2019il utilise ou par le protocole qu\u2019il suit.',1,100,1);
I[10]=new Array();I[10][0]=100;
I[10][1]='';
I[10][2]='0';
I[10][3]=new Array();
I[10][3][0]=new Array('Il permet d\u2019augmenter la vitesse de chargement des pages web.','',0,0,1);
I[10][3][1]=new Array('Il permet d\u2019am\u00E9liorer le r\u00E9f\u00E9rencement naturel des pages web.','',0,0,1);
I[10][3][2]=new Array('Il permet d\u2019assurer la confidentialit\u00E9 et l\u2019int\u00E9grit\u00E9 des donn\u00E9es \u00E9chang\u00E9es entre le serveur web et les navigateurs web.','Le serveur HTTPS est une version s\u00E9curis\u00E9e du serveur HTTP. Il utilise le protocole SSL/TLS pour chiffrer les donn\u00E9es entre le serveur web et les navigateurs web. Cela permet d\u2019\u00E9viter que les donn\u00E9es soient intercept\u00E9es ou modifi\u00E9es par des tiers malveillants. Les autres propositions ne sont pas des avantages du serveur HTTPS,',1,100,1);
I[10][3][3]=new Array('Il permet d\u2019ajouter des fonctionnalit\u00E9s interactives aux pages web.','',0,0,1);


function StartUp(){

//If there's only one question, no need for question navigation controls
	if (QsToShow < 2){
		document.getElementById('QNav').style.display = 'none';
	}
	
//Stash the instructions so they can be redisplayed
	strInstructions = document.getElementById('InstructionsDiv').innerHTML;
	

	

	

	
	CompleteEmptyFeedback();

	SetUpQuestions();
	ClearTextBoxes();
	CreateStatusArray();
	

	setTimeout('StartTimer()', 50);

	
//Check search string for q parameter
	if (document.location.search.length > 0){
		if (ShuffleQs == false){
			var JumpTo = parseInt(document.location.search.substring(1,document.location.search.length))-1;
			if (JumpTo <= QsToShow){
				ChangeQ(JumpTo);
			}
		}
	}
//Undocumented function added 10/12/2004
	ShowSpecialReadingForQuestion();
}

function ShowHideQuestions(){
	document.getElementById('ShowMethodButton').style.display = 'none';
	if (ShowingAllQuestions == false){
		for (var i=0; i<QArray.length; i++){
				QArray[i].style.display = '';
			}
		document.getElementById('Questions').style.listStyleType = 'decimal';
		document.getElementById('OneByOneReadout').style.display = 'none';
		document.getElementById('ShowMethodButton').innerHTML = ShowOneByOneCaption;
		ShowingAllQuestions = true;
	}
	else{
		for (var i=0; i<QArray.length; i++){
				if (i != CurrQNum){
					QArray[i].style.display = 'none';
				}
			}
		document.getElementById('Questions').style.listStyleType = 'none';
		document.getElementById('OneByOneReadout').style.display = '';
		document.getElementById('ShowMethodButton').innerHTML = ShowAllQuestionsCaption;
		ShowingAllQuestions = false;	
	}
	document.getElementById('ShowMethodButton').style.display = 'inline';
}

function CreateStatusArray(){
	var QNum, ANum;
//For each item in the item array
	for (QNum=0; QNum<I.length; QNum++){
//Check if the question still exists (hasn't been nuked by showing a random selection)
		if (document.getElementById('Q_' + QNum) != null){
			State[QNum] = new Array();
			State[QNum][0] = -1; //Score for this q; -1 shows question not done yet
			State[QNum][1] = new Array(); //answers
			for (ANum = 0; ANum<I[QNum][3].length; ANum++){
				State[QNum][1][ANum] = 0; //answer not chosen yet; when chosen, will store its position in the series of choices
			}
			State[QNum][2] = 0; //tries at this q so far
			State[QNum][3] = 0; //incrementing percent-correct values of selected answers
			State[QNum][4] = 0; //penalties incurred for hints
			State[QNum][5] = ''; //Sequence of answers chosen by number
		}
		else{
			State[QNum] = null;
		}
	}
}



function CheckMCAnswer(QNum, ANum, Btn){
//if question doesn't exist, bail
	if (State[QNum].length < 1){return;}
	
//Get the feedback
	Feedback = I[QNum][3][ANum][1];
	
//Now show feedback and bail if question already complete
	if (State[QNum][0] > -1){
//Add an extra message explaining that the question
// is finished if defined by the user
		if (strQuestionFinished.length > 0){Feedback += '<br />' + strQuestionFinished;}
//Show the feedback
		ShowMessage(Feedback);
//New for 6.2.2.1: If you want to mark an answer as correct even when it's the final choice, uncomment this line.
//		if (I[QNum][3][ANum][2] >= 1){Btn.innerHTML = CorrectIndicator;}else{Btn.innerHTML = IncorrectIndicator;}	
		return;
	}
	
//Hide the button while processing
	Btn.style.display = 'none';

//Increment the number of tries
	State[QNum][2]++;
	
//Add the percent-correct value of this answer
	State[QNum][3] += I[QNum][3][ANum][3];
	
//Store the try number in the answer part of the State array, for tracking purposes
	State[QNum][1][ANum] = State[QNum][2];
	if (State[QNum][5].length > 0){State[QNum][5] += ' | ';}
	State[QNum][5] += String.fromCharCode(65+ANum);
	
//Should this answer be accepted as correct?
	if (I[QNum][3][ANum][2] < 1){
//It's wrong

//Mark the answer
		Btn.innerHTML = IncorrectIndicator;
		
//Remove any previous score unless exercise is finished (6.0.3.8+)
		if (Finished == false){
			WriteToInstructions(strInstructions);
		}	
		
//Check whether this leaves just one MC answer unselected, in which case the Q is terminated
		var RemainingAnswer = FinalAnswer(QNum);
		if (RemainingAnswer > -1){
//Behave as if the last answer had been selected, but give no credit for it
//Increment the number of tries
			State[QNum][2]++;		
		
//Calculate the score for this question
			CalculateMCQuestionScore(QNum);
			
//Get the overall score and add it to the feedback
			CalculateOverallScore();
//New for 6.2.2.1
			var QsDone = CheckQuestionsCompleted();
			if ((ContinuousScoring == true)||(Finished == true)){
				Feedback += '<br />' + YourScoreIs + ' ' + Score + '%.' + '<br />' + QsDone;
				WriteToInstructions(YourScoreIs + ' ' + Score + '%.' + '<br />' + QsDone);
			}
			else{
				WriteToInstructions(QsDone);
			}
		}
	}
	else{
//It's right
//Mark the answer
		Btn.innerHTML = CorrectIndicator;
				
//Calculate the score for this question
		CalculateMCQuestionScore(QNum);
		
//New for 6.2.2.0
		var QsDone = CheckQuestionsCompleted();

//Get the overall score and add it to the feedback
		if (ContinuousScoring == true){
			CalculateOverallScore();
			if ((ContinuousScoring == true)||(Finished == true)){
				Feedback += '<br />' + YourScoreIs + ' ' + Score + '%.' + '<br />' + QsDone;
				WriteToInstructions(YourScoreIs + ' ' + Score + '%.' + '<br />' + QsDone);
			}
		}
		else{
			WriteToInstructions(QsDone);
		}
	}
	
//Show the button again
	Btn.style.display = 'inline';
	
//Finally, show the feedback	
	ShowMessage(Feedback);
	
//Check whether all questions are now done
	CheckFinished();
}

function CalculateMCQuestionScore(QNum){
	var Tries = State[QNum][2] + State[QNum][4]; //include tries and hint penalties
	var PercentCorrect = State[QNum][3];
	var TotAns = GetTotalMCAnswers(QNum);
	var HintPenalties = State[QNum][4];
	
//Make sure it's not already complete

	if (State[QNum][0] < 0){
//Allow for Hybrids
		if (HintPenalties >= 1){
			State[QNum][0] = 0;
		}
		else{
//This line calculates the score for this question
			if (TotAns == 1){
				State[QNum][0] = 1;
			}
			else{
				State[QNum][0] = ((TotAns-((Tries*100)/State[QNum][3]))/(TotAns-1));
			}
		}
//Fix for Safari bug added for version 6.0.3.42 (negative infinity problem)
		if ((State[QNum][0] < 0)||(State[QNum][0] == Number.NEGATIVE_INFINITY)){
			State[QNum][0] = 0;
		}
	}
}

function GetTotalMCAnswers(QNum){
	var Result = 0;
	for (var ANum=0; ANum<I[QNum][3].length; ANum++){
		if (I[QNum][3][ANum][4] == 1){ //This is an MC answer
			Result++;
		}
	}
	return Result;
}

function FinalAnswer(QNum){
	var UnchosenAnswers = 0;
	var FinalAnswer = -1;
	for (var ANum=0; ANum<I[QNum][3].length; ANum++){
		if (I[QNum][3][ANum][4] == 1){ //This is an MC answer
			if (State[QNum][1][ANum] < 1){ //This answer hasn't been chosen yet
				UnchosenAnswers++;
				FinalAnswer = ANum;
			}
		}
	}
	if (UnchosenAnswers == 1){
		return FinalAnswer;
	}
	else{
		return -1;
	}
}





function CalculateOverallScore(){
	var TotalWeighting = 0;
	var TotalScore = 0;
	
	for (var QNum=0; QNum<State.length; QNum++){
		if (State[QNum] != null){
			if (State[QNum][0] > -1){
				TotalWeighting += I[QNum][0];
				TotalScore += (I[QNum][0] * State[QNum][0]);
			}
		}
	}
	if (TotalWeighting > 0){
		Score = Math.floor((TotalScore/TotalWeighting)*100);
	}
	else{
//if TotalWeighting is 0, no questions so far have any value, so 
//no penalty should be shown.
		Score = 100; 
	}
}

//New for 6.2.2.0
function CheckQuestionsCompleted(){
	if (ShowCompletedSoFar == false){return '';}
	var QsCompleted = 0;
	for (var QNum=0; QNum<State.length; QNum++){
		if (State[QNum] != null){
			if (State[QNum][0] >= 0){
				QsCompleted++;
			}
		}
	}
//Fixes for 6.2.2.2
	if (QsCompleted >= QArray.length){
		return ExerciseCompleted;
	}
	else{
		return CompletedSoFar + ' ' + QsCompleted + '/' + QArray.length + '.';
	}
}

function CheckFinished(){
	var FB = '';
	var AllDone = true;
	for (var QNum=0; QNum<State.length; QNum++){
		if (State[QNum] != null){
			if (State[QNum][0] < 0){
				AllDone = false;
			}
		}
	}
	if (AllDone == true){
	
//Report final score and submit if necessary
		CalculateOverallScore();
		FB = YourScoreIs + ' ' + Score + '%.';
		if (ShowCorrectFirstTime == true){
			var CFT = 0;
			for (QNum=0; QNum<State.length; QNum++){
				if (State[QNum] != null){
					if (State[QNum][0] >= 1){
						CFT++;
					}
				}
			}
			FB += '<br />' + CorrectFirstTime + ' ' + CFT + '/' + QsToShow;
		}
		
//New for 6.2.2.0
		FB += '<br />' + ExerciseCompleted;
		
		WriteToInstructions(FB);
		
		Finished == true;

		window.clearInterval(Interval);




		TimeOver = true;
		Locked = true;
		


		Finished = true;
		Detail = '<?xml version="1.0"?><hpnetresult><fields>';
		for (QNum=0; QNum<State.length; QNum++){
			if (State[QNum] != null){
				if (State[QNum][5].length > 0){
					Detail += '<field><fieldname>Question #' + (QNum+1) + '</fieldname><fieldtype>question-tracking</fieldtype><fieldlabel>Q ' + (QNum+1) + '</fieldlabel><fieldlabelid>QuestionTrackingField</fieldlabelid><fielddata>' + State[QNum][5] + '</fielddata></field>';
				}
			}
		}
		Detail += '</fields></hpnetresult>';
	}

}


function TimesUp(){
	document.getElementById('Timer').innerHTML = 'Your time is over!';

	TimeOver = true;
	Finished = true;
	ShowMessage('Your time is over!');
	
//Set all remaining scores to 0
	for (var QNum=0; QNum<State.length; QNum++){
		if (State[QNum] != null){
			if (State[QNum][0] < 0){
				State[QNum][0] = 0;
			}
		}
	}
	CheckFinished();
}








//CODE FOR HANDLING TIMER
//Timer code
var Seconds = 540;
var Interval = null;

function StartTimer(){
	Interval = window.setInterval('DownTime()',1000);
	document.getElementById('TimerText').style.display = 'inline';
}

function DownTime(){
	var ss = Seconds % 60;
	if (ss<10){
		ss='0' + ss + '';
	}

	var mm = Math.floor(Seconds / 60);

	if (document.getElementById('Timer') == null){
		return;
	}

	document.getElementById('TimerText').innerHTML = mm + ':' + ss;
	if (Seconds < 1){
		window.clearInterval(Interval);
		TimeOver = true;
		TimesUp();
	}
	Seconds--;
}






//-->

//]]>

</script>


</head>

<body onload="StartUp()" id="TheBody" >

<!-- BeginTopNavButtons -->


<div class="NavButtonBar" id="TopNavBar">


<button class="NavButton" onclick="history.back(); return false;">&lt;=</button>



<button class="NavButton" onclick="location='contents.htm'; return false;"> Index </button>



<button class="NavButton" onclick="location='nextpage.htm'; return false;">=&gt;</button>


</div>



<!-- EndTopNavButtons -->

<div class="Titles">
	<h2 class="ExerciseTitle">R&#x00E9;sum&#x00E9; Th&#x00E9;orique - Chap 2 Architecture client / serveur</h2>

	<h3 class="ExerciseSubtitle">La famille</h3>


<div id="Timer"><span id="TimerText">&#160;&#160;</span></div>


</div>

<div id="InstructionsDiv" class="StdDiv">
	<div id="Instructions"></div>
</div>


<div id="ContainerDiv">



<div class="ExerciseContainer">

<div id="QNav" class="QuestionNavigation">

<p style="text-align: right;">
<button id="ShowMethodButton" class="FuncButton" onclick="ShowHideQuestions(); return false;">Show all questions</button>
</p>

<div id="OneByOneReadout">
<button id="PrevQButton" class="FuncButton" onclick="ChangeQ(-1); return false;">&lt;=</button>

<span id="QNumReadout" class="QNum">&#160;</span>

<button id="NextQButton" class="FuncButton" onclick="ChangeQ(1); return false;">=&gt;</button>
<br />
</div>

</div>
 
<ol class="QuizQuestions" id="Questions">
<li class="QuizQuestion" id="Q_0" style="display: none;"><div class="QuestionText">Quelle est la d&#x00E9;finition de l&#x2019;architecture client/serveur ?</div><ol class="MCAnswers"><li id="Q_0_0"><button class="FuncButton" id="Q_0_0_Btn" onclick="CheckMCAnswer(0,0,this)">?</button>&#160;&#160;Une structure d&#x2019;application distribu&#x00E9;e qui r&#x00E9;partit les t&#x00E2;ches entre les fournisseurs d&#x2019;un service, appel&#x00E9;s serveurs, et les demandeurs du service, appel&#x00E9;s clients.</li><li id="Q_0_1"><button class="FuncButton" id="Q_0_1_Btn" onclick="CheckMCAnswer(0,1,this)">?</button>&#160;&#160;Une structure d&#x2019;application centralis&#x00E9;e qui ex&#x00E9;cute toutes les t&#x00E2;ches sur un seul ordinateur, appel&#x00E9; serveur, et qui communique avec les utilisateurs, appel&#x00E9;s clients.</li><li id="Q_0_2"><button class="FuncButton" id="Q_0_2_Btn" onclick="CheckMCAnswer(0,2,this)">?</button>&#160;&#160;Une structure d&#x2019;application modulaire qui divise les t&#x00E2;ches en plusieurs composants ind&#x00E9;pendants, appel&#x00E9;s clients, et qui interagissent avec un syst&#x00E8;me de gestion, appel&#x00E9; serveur.</li><li id="Q_0_3"><button class="FuncButton" id="Q_0_3_Btn" onclick="CheckMCAnswer(0,3,this)">?</button>&#160;&#160;) Une structure d&#x2019;application parall&#x00E8;le qui ex&#x00E9;cute les m&#x00EA;mes t&#x00E2;ches sur plusieurs ordinateurs, appel&#x00E9;s clients, et qui se synchronisent avec un contr&#x00F4;leur, appel&#x00E9; serveur.</li></ol></li>
<li class="QuizQuestion" id="Q_1" style="display: none;"><div class="QuestionText">Quel est le r&#x00F4;le du protocole HTTP dans l&#x2019;architecture client/serveur pour le cas d&#x2019;une architecture web ?</div><ol class="MCAnswers"><li id="Q_1_0"><button class="FuncButton" id="Q_1_0_Btn" onclick="CheckMCAnswer(1,0,this)">?</button>&#160;&#160;Il permet au client de se connecter au serveur gr&#x00E2;ce &#x00E0; son adresse et &#x00E0; son port.</li><li id="Q_1_1"><button class="FuncButton" id="Q_1_1_Btn" onclick="CheckMCAnswer(1,1,this)">?</button>&#160;&#160;Il permet au serveur de renvoyer au client des donn&#x00E9;es sous forme de fichiers HTML, CSS ou JavaScript.</li><li id="Q_1_2"><button class="FuncButton" id="Q_1_2_Btn" onclick="CheckMCAnswer(1,2,this)">?</button>&#160;&#160;Il permet au client d&#x2019;envoyer au serveur une requ&#x00EA;te sp&#x00E9;cifiant l&#x2019;action et la ressource souhait&#x00E9;es.</li><li id="Q_1_3"><button class="FuncButton" id="Q_1_3_Btn" onclick="CheckMCAnswer(1,3,this)">?</button>&#160;&#160;Il permet au client et au serveur de communiquer selon un format standardis&#x00E9;.</li></ol></li>
<li class="QuizQuestion" id="Q_2" style="display: none;"><div class="QuestionText">Quelle est la m&#x00E9;thode HTTP utilis&#x00E9;e par le client pour r&#x00E9;cup&#x00E9;rer une ressource sp&#x00E9;cifique sur le serveur, par exemple un fichier HTML contenant des informations sur un produit ?</div><ol class="MCAnswers"><li id="Q_2_0"><button class="FuncButton" id="Q_2_0_Btn" onclick="CheckMCAnswer(2,0,this)">?</button>&#160;&#160;GET</li><li id="Q_2_1"><button class="FuncButton" id="Q_2_1_Btn" onclick="CheckMCAnswer(2,1,this)">?</button>&#160;&#160;POST</li><li id="Q_2_2"><button class="FuncButton" id="Q_2_2_Btn" onclick="CheckMCAnswer(2,2,this)">?</button>&#160;&#160;HEAD</li><li id="Q_2_3"><button class="FuncButton" id="Q_2_3_Btn" onclick="CheckMCAnswer(2,3,this)">?</button>&#160;&#160;PUT</li></ol></li>
<li class="QuizQuestion" id="Q_3" style="display: none;"><div class="QuestionText">Quel est le format des requ&#x00EA;tes et des r&#x00E9;ponses HTTP entre le client et le serveur ?</div><ol class="MCAnswers"><li id="Q_3_0"><button class="FuncButton" id="Q_3_0_Btn" onclick="CheckMCAnswer(3,0,this)">?</button>&#160;&#160;Un format binaire compos&#x00E9; de bits et d&#x2019;octets.</li><li id="Q_3_1"><button class="FuncButton" id="Q_3_1_Btn" onclick="CheckMCAnswer(3,1,this)">?</button>&#160;&#160;Un format texte compos&#x00E9; de lignes et de caract&#x00E8;res.</li><li id="Q_3_2"><button class="FuncButton" id="Q_3_2_Btn" onclick="CheckMCAnswer(3,2,this)">?</button>&#160;&#160;Un format graphique compos&#x00E9; d&#x2019;images et de couleurs.</li><li id="Q_3_3"><button class="FuncButton" id="Q_3_3_Btn" onclick="CheckMCAnswer(3,3,this)">?</button>&#160;&#160;Un format audio compos&#x00E9; de sons et de fr&#x00E9;quences.</li></ol></li>
<li class="QuizQuestion" id="Q_4" style="display: none;"><div class="QuestionText">Quel est le r&#x00F4;le du port dans l&#x2019;adresse du serveur ?</div><ol class="MCAnswers"><li id="Q_4_0"><button class="FuncButton" id="Q_4_0_Btn" onclick="CheckMCAnswer(4,0,this)">?</button>&#160;&#160;Il permet d&#x2019;identifier la machine physique qui h&#x00E9;berge le serveur.</li><li id="Q_4_1"><button class="FuncButton" id="Q_4_1_Btn" onclick="CheckMCAnswer(4,1,this)">?</button>&#160;&#160;Il permet d&#x2019;identifier le service particulier auquel le client souhaite acc&#x00E9;der sur le serveur.</li><li id="Q_4_2"><button class="FuncButton" id="Q_4_2_Btn" onclick="CheckMCAnswer(4,2,this)">?</button>&#160;&#160;Il permet d&#x2019;identifier le protocole utilis&#x00E9; pour communiquer avec le serveur.</li><li id="Q_4_3"><button class="FuncButton" id="Q_4_3_Btn" onclick="CheckMCAnswer(4,3,this)">?</button>&#160;&#160;Il permet d&#x2019;identifier la ressource sp&#x00E9;cifique que le client demande au serveur.</li></ol></li>
<li class="QuizQuestion" id="Q_5" style="display: none;"><div class="QuestionText">Quelle est la diff&#x00E9;rence entre les requ&#x00EA;tes HTTP synchrones et asynchrones ?</div><ol class="MCAnswers"><li id="Q_5_0"><button class="FuncButton" id="Q_5_0_Btn" onclick="CheckMCAnswer(5,0,this)">?</button>&#160;&#160;Les requ&#x00EA;tes synchrones bloquent l&#x2019;ex&#x00E9;cution du code jusqu&#x2019;&#x00E0; ce que la r&#x00E9;ponse soit re&#x00E7;ue, tandis que les requ&#x00EA;tes asynchrones permettent au code de continuer &#x00E0; s&#x2019;ex&#x00E9;cuter pendant que la r&#x00E9;ponse est attendue.</li><li id="Q_5_1"><button class="FuncButton" id="Q_5_1_Btn" onclick="CheckMCAnswer(5,1,this)">?</button>&#160;&#160;Les requ&#x00EA;tes synchrones envoient plusieurs requ&#x00EA;tes en m&#x00EA;me temps et re&#x00E7;oivent les r&#x00E9;ponses dans l&#x2019;ordre, tandis que les requ&#x00EA;tes asynchrones envoient une seule requ&#x00EA;te &#x00E0; la fois et re&#x00E7;oivent la r&#x00E9;ponse imm&#x00E9;diatement.</li><li id="Q_5_2"><button class="FuncButton" id="Q_5_2_Btn" onclick="CheckMCAnswer(5,2,this)">?</button>&#160;&#160;Les requ&#x00EA;tes synchrones utilisent un seul thread pour g&#x00E9;rer les requ&#x00EA;tes et les r&#x00E9;ponses, tandis que les requ&#x00EA;tes asynchrones utilisent plusieurs threads pour g&#x00E9;rer les requ&#x00EA;tes et les r&#x00E9;ponses.</li><li id="Q_5_3"><button class="FuncButton" id="Q_5_3_Btn" onclick="CheckMCAnswer(5,3,this)">?</button>&#160;&#160;Les requ&#x00EA;tes synchrones n&#x00E9;cessitent une connexion persistante entre le client et le serveur, tandis que les requ&#x00EA;tes asynchrones peuvent utiliser une connexion intermittente entre le client et le serveur.</li></ol></li>
<li class="QuizQuestion" id="Q_6" style="display: none;"><div class="QuestionText">Quelle est la diff&#x00E9;rence entre un serveur web statique et un serveur web dynamique ?</div><ol class="MCAnswers"><li id="Q_6_0"><button class="FuncButton" id="Q_6_0_Btn" onclick="CheckMCAnswer(6,0,this)">?</button>&#160;&#160;Un serveur web statique ne peut pas modifier le contenu des fichiers qu&#x2019;il renvoie au client, tandis qu&#x2019;un serveur web dynamique peut modifier le contenu des fichiers en fonction de la requ&#x00EA;te du client ou d&#x2019;autres param&#x00E8;tres.</li><li id="Q_6_1"><button class="FuncButton" id="Q_6_1_Btn" onclick="CheckMCAnswer(6,1,this)">?</button>&#160;&#160;Un serveur web statique ne peut pas utiliser de langages de programmation c&#x00F4;t&#x00E9; serveur, tandis qu&#x2019;un serveur web dynamique peut utiliser des langages comme PHP, Python ou Ruby pour cr&#x00E9;er des fichiers &#x00E0; la vol&#x00E9;e.</li><li id="Q_6_2"><button class="FuncButton" id="Q_6_2_Btn" onclick="CheckMCAnswer(6,2,this)">?</button>&#160;&#160;Un serveur web statique ne peut pas se connecter &#x00E0; une base de donn&#x00E9;es, tandis qu&#x2019;un serveur web dynamique peut se connecter &#x00E0; une base de donn&#x00E9;es pour r&#x00E9;cup&#x00E9;rer ou stocker des informations.</li><li id="Q_6_3"><button class="FuncButton" id="Q_6_3_Btn" onclick="CheckMCAnswer(6,3,this)">?</button>&#160;&#160;Toutes les r&#x00E9;ponses sont correctes.</li></ol></li>
<li class="QuizQuestion" id="Q_7" style="display: none;"><div class="QuestionText">Qu&#x2019;est-ce qu&#x2019;un serveur web au sens mat&#x00E9;riel ?</div><ol class="MCAnswers"><li id="Q_7_0"><button class="FuncButton" id="Q_7_0_Btn" onclick="CheckMCAnswer(7,0,this)">?</button>&#160;&#160;Un ordinateur qui stocke les fichiers qui composent un site web et qui les envoie aux navigateurs web des utilisateurs.</li><li id="Q_7_1"><button class="FuncButton" id="Q_7_1_Btn" onclick="CheckMCAnswer(7,1,this)">?</button>&#160;&#160;Un ordinateur qui ex&#x00E9;cute un logiciel qui comprend les requ&#x00EA;tes HTTP des navigateurs web et qui leur renvoie des r&#x00E9;ponses.</li><li id="Q_7_2"><button class="FuncButton" id="Q_7_2_Btn" onclick="CheckMCAnswer(7,2,this)">?</button>&#160;&#160;Un ordinateur qui se connecte &#x00E0; Internet et qui est accessible via un nom de domaine ou une adresse IP.</li><li id="Q_7_3"><button class="FuncButton" id="Q_7_3_Btn" onclick="CheckMCAnswer(7,3,this)">?</button>&#160;&#160;Toutes les r&#x00E9;ponses sont correctes.</li></ol></li>
<li class="QuizQuestion" id="Q_8" style="display: none;"><div class="QuestionText">Quel est le r&#x00F4;le du serveur HTTP dans un serveur web ?</div><ol class="MCAnswers"><li id="Q_8_0"><button class="FuncButton" id="Q_8_0_Btn" onclick="CheckMCAnswer(8,0,this)">?</button>&#160;&#160;Il permet de g&#x00E9;rer la communication entre le serveur web et les navigateurs web selon le protocole HTTP.</li><li id="Q_8_1"><button class="FuncButton" id="Q_8_1_Btn" onclick="CheckMCAnswer(8,1,this)">?</button>&#160;&#160;Il permet de cr&#x00E9;er des pages web dynamiques en utilisant des langages de programmation c&#x00F4;t&#x00E9; serveur.</li><li id="Q_8_2"><button class="FuncButton" id="Q_8_2_Btn" onclick="CheckMCAnswer(8,2,this)">?</button>&#160;&#160;Il permet de se connecter &#x00E0; une base de donn&#x00E9;es pour r&#x00E9;cup&#x00E9;rer ou stocker des informations.</li><li id="Q_8_3"><button class="FuncButton" id="Q_8_3_Btn" onclick="CheckMCAnswer(8,3,this)">?</button>&#160;&#160;Il permet de s&#x00E9;curiser la transmission des donn&#x00E9;es entre le serveur web et les navigateurs web.</li></ol></li>
<li class="QuizQuestion" id="Q_9" style="display: none;"><div class="QuestionText">Quelle est la diff&#x00E9;rence entre un site web statique et un site web dynamique ?</div><ol class="MCAnswers"><li id="Q_9_0"><button class="FuncButton" id="Q_9_0_Btn" onclick="CheckMCAnswer(9,0,this)">?</button>&#160;&#160;Un site web statique est compos&#x00E9; de fichiers HTML, CSS et JavaScript qui sont envoy&#x00E9;s tels quels au navigateur web, tandis qu&#x2019;un site web dynamique est compos&#x00E9; de fichiers qui sont modifi&#x00E9;s ou g&#x00E9;n&#x00E9;r&#x00E9;s par le serveur web avant d&#x2019;&#x00EA;tre envoy&#x00E9;s au navigateur web.</li><li id="Q_9_1"><button class="FuncButton" id="Q_9_1_Btn" onclick="CheckMCAnswer(9,1,this)">?</button>&#160;&#160;Un site web statique est compos&#x00E9; de fichiers qui ne changent pas, tandis qu&#x2019;un site web dynamique est compos&#x00E9; de fichiers qui changent en fonction du temps, du nombre de visiteurs ou d&#x2019;autres param&#x00E8;tres.</li><li id="Q_9_2"><button class="FuncButton" id="Q_9_2_Btn" onclick="CheckMCAnswer(9,2,this)">?</button>&#160;&#160;Un site web statique est compos&#x00E9; de fichiers qui ne n&#x00E9;cessitent pas de langages de programmation c&#x00F4;t&#x00E9; serveur, tandis qu&#x2019;un site web dynamique est compos&#x00E9; de fichiers qui n&#x00E9;cessitent des langages comme PHP, Python ou Ruby pour &#x00EA;tre cr&#x00E9;&#x00E9;s.</li><li id="Q_9_3"><button class="FuncButton" id="Q_9_3_Btn" onclick="CheckMCAnswer(9,3,this)">?</button>&#160;&#160;Toutes les r&#x00E9;ponses sont correctes.</li></ol></li>
<li class="QuizQuestion" id="Q_10" style="display: none;"><div class="QuestionText">Quel est l&#x2019;avantage d&#x2019;utiliser un serveur HTTPS au lieu d&#x2019;un serveur HTTP ?</div><ol class="MCAnswers"><li id="Q_10_0"><button class="FuncButton" id="Q_10_0_Btn" onclick="CheckMCAnswer(10,0,this)">?</button>&#160;&#160;Il permet d&#x2019;augmenter la vitesse de chargement des pages web.</li><li id="Q_10_1"><button class="FuncButton" id="Q_10_1_Btn" onclick="CheckMCAnswer(10,1,this)">?</button>&#160;&#160;Il permet d&#x2019;am&#x00E9;liorer le r&#x00E9;f&#x00E9;rencement naturel des pages web.</li><li id="Q_10_2"><button class="FuncButton" id="Q_10_2_Btn" onclick="CheckMCAnswer(10,2,this)">?</button>&#160;&#160;Il permet d&#x2019;assurer la confidentialit&#x00E9; et l&#x2019;int&#x00E9;grit&#x00E9; des donn&#x00E9;es &#x00E9;chang&#x00E9;es entre le serveur web et les navigateurs web.</li><li id="Q_10_3"><button class="FuncButton" id="Q_10_3_Btn" onclick="CheckMCAnswer(10,3,this)">?</button>&#160;&#160;Il permet d&#x2019;ajouter des fonctionnalit&#x00E9;s interactives aux pages web.</li></ol></li></ol>



</div>

</div>

<div class="Feedback" id="FeedbackDiv">
<div class="FeedbackText" id="FeedbackContent"></div>
<button id="FeedbackOKButton" class="FuncButton" onclick="HideFeedback(); return false;">&#160;OK&#160;</button>
</div>

<!-- BeginBottomNavButtons -->


<div class="NavButtonBar" id="BottomNavBar">


<button class="NavButton" onclick="history.back(); return false;">&lt;=</button>



<button class="NavButton" onclick="location='contents.htm'; return false;"> Index </button>



<button class="NavButton" onclick="location='nextpage.htm'; return false;">=&gt;</button>


</div>



<!-- EndBottomNavButtons -->

<!-- BeginSubmissionForm -->

<!-- EndSubmissionForm -->

</body>

</html>
